{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

     "Variable+scope":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_variableAndScope",
		"body": [
			"<?php",
			"//Basic variable",
			"   \\$name ='HP';",
			"   echo 'Hello '.\\$name;",
			"\t",
			"//The example below will show you how to access the variable above inside a function",
			"  \\$name2='HP';",
			"   function Welcome(){",
			"      global \\$name2;//with global keyword, you can access \\$name variable inside this function",
			"      \\$text = 'Welcome '; //this variable has local scope and can not be accessed outside this function",
            "      echo \\$text.\\$name2;",    
			"   }",
			"   Welcome();",
			"\t",
			"//The example below will show you how to update value for a variable ",
			"//using a global array inside a function",
			"  \\$name3='HP';",
			"   function Update_name(){",
			"      \\$GLOBALS['name3']='FGHT';",
			"   }",
			"   Update_name();",
			"   echo \\$name3;",
			"//output FGHT",
			"\t",
			"//Normally, when a function is completed/executed, all of its variables are deleted.",
			"// However, sometimes we want a local variable NOT to be deleted. We need it for a further job.",
            "//To do this, use the static keyword when you first declare the variable:",
			"  function myTest() {",
			"    static \\$x = 0;",
			"    echo \\$x;",
			"    \\$x++;",
			"  }",
			"  ",
			"  myTest();",
			"  myTest();",
			"  myTest();",

			"?>",

		],
		"description": "Adding a block of syntaxes with basic variables syntax + variables scope"
	 },

	 "If...elseif...else conditional statement":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_if_elseif_else",
		"body": [
			"if(/*condition*/){",
			"//output something",
			"}elseif(/*condition*/){",
			"//output something",
			"}else{",
			"//output something",
			"};",
			"\t",
			"//Example:",
			"\\$age = 25;",
			"if(\\$age >18){",
			"   echo 'You are adult';",
			"}elseif(\\$age >10 && \\$age < 18){",
			"   echo 'You are teenager';",
			"}else{",
			"   echo 'UNKNOWN AGE';",
			"};",
			"//Below is Switch condition syntax. It's as same as JavaScript switch syntax.",
			"//Therefore, I don't want to give example",
			"switch ('n') {",
			"   case 'label1':",
			"     //code to be executed if n=label1;",
			"     break;",
			"   case 'label2':",
			"     //code to be executed if n=label2;",
			"     break;",
			"   case 'label3':",
			"     //code to be executed if n=label3;",
			"     break;",
			"     //...",
			"   default:",
			"     //code to be executed if n is different from all labels;",
			"}"
  
		],
		"description": "Adding syntaxes of if,elseif,else,switch condition"
	 },


	 "Basic array":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_arrayBasic",
		"body":[
			"\\$car = array('BMW','Chervolet','Audi');",
			"\t",
			"  $car_list = array('Model1'=>'BMW','Model2'=>'Chervolet','Model3'=>'Audi');"
		],
		"description": "Adding a basic array variable syntax"
	 },



	 "Basic Class":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_classBasic",
		"body":[
			"class Customer {",
			"     const Customer_id = 'Cus-233465776267883266789';",
			"     //Constant variable can not be changed.",
			"     //You can access it outside this class by writing ",
			"     //a class name or object name assigned to this class + '::' + const variable name",
			"\t",
			"     //If you want to access this constant variable inside any methods of this class",
			"     //=> write:   self::Customer_id ",

			"\t",
			"     public static \\$Customer_passcode = '135484';",
			"     //This static property can be called directly without being declared in the instance of this class.",
			"     //Calling it outside a class, inside other class, or inside external functions",  
			"     //by writing: Customer::\\$Customer_passcode.",
			"     //Calling it inside a method by writting: self::\\$Customer_passcode.",
			"     //Calling it inside a child class by writting:  parent::\\$Customer_passcode.",
			"\t",

			"      public \\$name;//public,protected, and private keyword are access modifiers.", 
			"      //public allows properties or methods to be accessed everywhere",
			"      //If you try to access $name outside this class, it will return a value",
			
			"\t",
			
			"      private \\$occupation;//private allows properties or methods to only be accessed in this class",
			"      //You can access it through methods. If you call this property outside this class, it will generate an error",
			
			"\t",
			"     public static function Message1(){",
			"        return 'This is Customer Object Collection!!! <br>';",
			"     } ",
		    "     //Calling it outside a class, inside other class, or inside external functions",  
			"     //by writing: Customer::Message1().",
		    "     //Calling it inside a method by writting: self::Message1().",
		    "     //Calling it inside a child class by writting:  parent::Message1().",

			"   public function __construct(\\$name,\\$occupation){",
			"       \\$this->name = \\$name;",
			"       \\$this->occupation = \\$occupation;",
			"   }",
			"   public function Introduction1(){",
			"       return 'This is customer '.\\$this->name.', a '.\\$this->occupation;",
			"        //You can access \\$occupation property inside this method by calling \\$this->occupation.",
			"   } ",
			"   function __destruct(){// This method will automatically called at the end of all of your output values.",
			"      echo 'End the program. Case: '.self::Customer_id.'. Passcode: '.self::\\$Customer_passcode;",
		    "   }",
            "\t",
			"   protected function Sale_Intro(){",
			"   //protected only allows you to access inside this class and any other classes that derived from this class",
			"   //like child classes",
			"      return 'Sale 15%';",
			"   }",
		   "}",
		    "\\$customer_obj = new Customer('HP','Web Developer');",
			" echo Customer::Message1();",
			"echo 'Customer id: '.\\$customer_obj::Customer_id.'<br>';",
			"echo 'Customer passcode: '.Customer::\\$Customer_passcode.'<br>';",
			"echo \\$customer_obj->Introduction1().'<br>';",
			"echo \\$customer_obj->name.'<br>';",
			"echo \\$customer_obj->occupation.'<br>';",
			"/*",
			"This is Customer Object Collection!!!",
			"Customer id: Cus-233465776267883266789  ",
			"Customer passcode: 135484",
			"This is customer HP, a Web Developer",
			"HP",
			"Fatal error: Uncaught Error: Cannot access private property Customer",
			"End the program. Case: Cus-233465776267883266789. Passcode: 135484",
			"*/",

			"\t",
			"\t",

			
			"class Order_Event extends Customer{",
			"   public function Introduction(){",
			"       return parent::Message1();",
			"   }",
			"   public function Inform(){",
			"       return 'Sale event this week is going to '.\\$this->Sale_Intro(). ' at all the products';",
			"   }",
			"}",
            "\t",
			"\\$Order_Event_obj = new Order_Event('HP','Web Developer');",
			"echo \\$Order_Event_obj->Introduction();",
			"echo \\$Order_Event_obj->Inform().'<br>';",
			"/*",
			"Output",
			"This is Customer Object Collection!!!",
			"Sale event this week is going to Sale 15% at all the products",
			"End the program. Case: Cus-233465776267883266789. Passcode: 135484",
			"*/",
		],
		"description": "Adding a basic class syntax with a parent class with constant variable, static property, static method, properties, __construct, __destruct, method, access modifiers, output syntaxes and a child class "
	 },

	 "class with set and get method":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_classWithSetGetMethods",
		"body":[
		  "class Car{",
		  "    public \\$Model, \\$Brand;",
		  "    public function __construct(\\$Model,\\$Brand){",
		  "       \\$this->model = \\$Model;",
		  "       \\$this->brand = \\$Brand;",
		  "    //\\$this keyword refers to the current object, and is only available inside methods",
		  "    }",
		  "    public function Introduction(){",
		  "        return 'Model: '.\\$this->model.'. Brand: '.\\$this->brand;",
		  "    }",
		  "    function setModel(\\$Model){",
		  "       \\$this->model = \\$Model;",
		  "    }",
		  "    function getModel(){",
		  "      return 'Model: '.\\$this->model;",
		  "    }",
		  "    function setBrand(\\$Brand){",
		  "        \\$this->brand = \\$Brand;",
		  "    }",
		  "    function getBrand(){",
		  "       return 'Brand: '.\\$this->brand;",
		  "    }",
		  "\t",
		  "}",
		  " \\$car_obj = new Car('Audi-267','Audi');",
		  " echo \\$car_obj->Introduction().'<br>';",
		  " //output Model: Audi-267. Brand: Audi",
		 "\t",
		  " \\$car_obj->setModel('Audi-268');",
		  " echo \\$car_obj->getModel().'<br>';",
		  " //output Model: Audi-268.",
		 "\t",
		  " \\$car_obj->setBrand('Huyndai');",
		  " echo \\$car_obj->getBrand().'<br>';",
		  " //output Brand: Huyndai.",
		  "\t",
		  " //We can try to change a class's property like an example below",
		  " \\$car_obj->Brand = 'BMW';",
		  " echo \\$car_obj->Brand;",
		  " //output BMW",
		],
		"description": "Inserting a class object that has __construct, set, get, and output methods "
	 },



	 "class with __destruct + __construct method":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_classWithDestructMethods",
		"body":[
			"class Car{",
			"   public \\$Model, \\$Brand;",
			"   public function __construct(\\$Model,\\$Brand){",
			"       \\$this->model = \\$Model;",
			"       \\$this->brand = \\$Brand;",
			"   //\\$this keyword refers to the current object, and is only available inside methods",
			"   }",
			"   function __destruct(){ ",
			"      //__destruct method will automatically called when you assign an object to this class",
			"      //This method doesn't need access modifiers like public,protected, or private because it automatically called",
			"      //No matter where you placed this method, it will output at the end of your intented output values",
			"      echo 'Welcome to this Car Object!!!';",
			"   }",
			"   public function Introduction(){",
			"      return 'This is a Model: '.\\$this->model.'. Brand: '.\\$this->brand;",
			"   }",
			
			"\t",
			"}",
			" \\$car_obj = new Car('Audi-267','Audi');",
			" echo \\$car_obj->Introduction();",
			" //output",
			" //This is a Model: Audi-267. Brand: Audi",
			" //Welcome to this Car Object!!!",
			
		   
		],
		"description": "Inserting a class object that has __construct, __destruct, and output methods "
	 },


	 "class Inheritance":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_classInheritance",
		"body":[
			
		"class Customer {// you can add 'final' keyword before 'class' to prevent class inheritance or methods overriding",

		"     const Customer_id = 'Cus-233465776267883266789';",
		"     //Constant variable can not be changed.",
		"     //You can access it outside this class by writing ",
		"     //a class name or object name assigned to this class + '::' + const variable name",
	    "\t",
		"     //If you want to access this constant variable inside any methods of this class",
		"     //=> write:   self::Customer_id ",



		"  public \\$name;//public,protected, and private keyword are access modifiers.",
		"//public allows properties or methods to be accessed everywhere",
		"//If you try to access name outside this class, it will return a value",
		"\t",
		"  private \\$occupation;//private allows properties or methods to only be accessed in this class",
		"//You can access it through methods. If you call this property outside this class, it will generate an error",
		"  public function __construct(\\$name,\\$occupation){",
		"     \\$this->name = \\$name;",
		"     \\$this->occupation = \\$occupation;",
		"  }",
        "\t",
		"  public function Introduction1(){",
		"       return 'This is customer '.\\$this->name.', a '.\\$this->occupation;",
		"       //You can access \\$occupation property inside this method by calling $this->occupation.",
		"  } ",
		"  function __destruct(){// This method will automatically called at the end of all of your output values.",
		"       echo 'End the program.';",
		"  }",
        "\t",
		"  protected function Order_Intro(){",
		"  //protected only allows you to access inside this class and any other classes that derived from this class",
		"  //like child classes",
		"  return 'Ordered item: '.\\$this->order_item;",
		"  }",
		"}",
		"\\$customer_obj = new Customer('HP','Web Developer');",
		"echo \\$customer_obj->Introduction1().'<br>';",
		"echo \\$customer_obj->name.'<br>';",
		"//echo \\$customer_obj->occupation.'<br>  Output Fatal error: Uncaught Error: Cannot access private property Customer';",
		"\t",
        "\t",
		"class Laptop_Order extends Customer {",
		"   public function __construct(\\$name,\\$occupation,\\$order_item,\\$price){",
		"       \\$this->name = \\$name;",
		"       \\$this->occupation = \\$occupation;",
		"       \\$this->order_item = \\$order_item;",
		"       \\$this->price = \\$price;",
		"   }",
		"   public function Receipt(){",
		"       return 'Name: '.\\$this->name.'. '.\\$this->Order_Intro().'<br>';",
		"   }",
		"}",
		"\\$Laptop_Order_obj = new Laptop_Order('HP','Web Developer','HP Envy x720','\\$1,298');",
		"echo \\$Laptop_Order_obj->Receipt();",
        "\t",
		"class Sale_Event extends Laptop_Order{",
		"   public function Sale_Intro(\\$sale){",
		"       \\$this->sale = \\$sale;",
		"       return 'This month, product: '.\\$this->order_item. ' is going to sale at '.\\$this->sale.'. <br>",
		"       The sale price is: '.\\$this->price. '<br>';",
		"   }",
		"}",
		"\\$Sale_Event_obj  = new Sale_Event('HP','Web Developer','HP Envy x720','\\$1,298'); ",
		"echo \\$Sale_Event_obj->Sale_Intro('15%');",
        "\t",
		"/*Output",
		"This is customer HP, a Web Developer",
		"HP",
		"Name: HP. Ordered item: HP Envy x720",
		"This month, product: HP Envy x720 is going to sale at 15%.",
		"The sale price is: \\$1,298",
		"End the program.End the program.",
		"*/",
		],
		"description": "Inserting a class object that combines with some child classes "
	 },

     "class combines with trait methods":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_classTrait",
		"body": [
				"//Traits are used to declare methods that can be used in multiple classes. ",
				"//Traits can have methods and abstract methods that can be used in multiple classes,",
				"// and the methods can have any access modifier (public, private, or protected).",
				"//Traits are declared with the trait keyword",
				"//To use a trait in a class, use the use keyword",
				"\t",
				"trait Sale_Price {",
				"   public function Sale_Inform(){",
				"   return 'This week Sale event is Sale 20%.<br>';",
				"   }",
				"}",
				"\t",
				"trait Promotion_Code {",
				"   protected function Promotion_Inform(){",
				"   return 'This week Promotion code is PHMNLF20.<br>';",
				"   }",
				"}",
				"\t",
				"class Status1 {",
				"   use Sale_Price;",
				"}",
				"\\$status1_obj = new Status1();",
				"echo \\$status1_obj->Sale_Inform();",
				"\t",
				"\t",
				"class Status2 {",
				"   use Sale_Price,Promotion_Code;",
				"   public function Message1(){",
				"   return \\$this->Promotion_Inform();",
				"   }",
				"}",
				"\\$status2_obj = new Status2();",
				"echo \\$status2_obj->Message1();",
				"/*output",
				"This week Sale event is Sale 20%.",
				"This week Promotion code is PHMNLF20.",
				"*/",
   				"\t",
		],
		"description": "Inserting a two trait methods and two classes to show the ways to combine traits into many classes."
	 },


	 "abstract class":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_classAbstract",
		"body": [
				"/* Abstract classes and methods are when the parent class has a named method, ",
 			    "but need its child class(es) to fill out the tasks.",
   				"\t",
				"   If you want to use an abstract class, knows that this class can do all the things ",
				"   a normal class can do, and you also want one or more methods to have 'abstract' keyword ",
				"   at the beginning so that the child classes can specify the tasks for it.",
				"   The child classes can only used for specify the tasks for the parent's methods ",
				"   and nothing else.",
				"*/",
				"\t",
   				"abstract class Car {",
     			"\t",
				"\t",
				"   public function __construct(\\$model,\\$brand){",
				"       \\$this->model = \\$model;",
				"       \\$this->brand = \\$brand;",
				"   }",
				"   abstract public function Introduction() : string; ",
				"   abstract public function SaleEvent(\\$sale);",
				"}",
				"\t",
				"class Information1 extends Car{",
				"   public function Introduction() : string {",
				"       return \"This is model: \".\\$this->model.\", brand: \".\\$this->brand.\".<br>\";",
				"   }",
				"   public function SaleEvent(\\$sale){",
				"       return 'This week sale event is: '.\\$sale.' sale for all cars!!!<br>';",
				"   }",
				"}",
				"\\$Infor_obj = new Information1('Ford-5467','Ford');",
				"echo \\$Infor_obj->Introduction();",
				"echo \\$Infor_obj->SaleEvent('20%');",
				"\t",
				"\t",
				"//This child class has the SaleEvent with \\$sale parameters and two other parameters that don't belong to",
				"//the Car class. Notice that when you want to declare more parameters like that, you must declare values",
				"class Information2 extends Car {",
				"\t",
				"\t",
				"   public function Introduction() : string {",
				"       return \"This is model: \".\\$this->model.\", brand: \".\\$this->brand.\".<br>\";",
				"   }",
				"\t",
				"   public function SaleEvent(\\$sale,\\$beginDate='7/26/2022',\\$endDate='8/2/2022'){",
				"\t",
				"       return 'This week sale event is: '.\\$sale.' sale for all cars. Begin date: '",
				"       .\\$beginDate.'. End date: '.\\$endDate.'.<br>';",
				"   }",
				"}",
				"\\$Infor2_obj = new Information2('Lamborghini Aventador','Lamborghini');",
				"echo \\$Infor2_obj->Introduction();",
				"echo \\$Infor2_obj->SaleEvent('30%');",
				"\t",
				"/*output",
				"This is model: Ford-5467, brand: Ford.",
				"This week sale event is: 20% sale for all cars!!!",
				"This is model: Lamborghini Aventador, brand: Lamborghini.",
				"This week sale event is: 30% sale for all cars. Begin date: 7/26/2022. End date: 8/2/2022.",
				"*/",
		],
		"description": "Inserting a block of codes contains abstract class and two other child classes."
	 },

	 "Interface class":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_classInterface",
		"body":[
				"/*",
				"An interface class is as similar to  an abstract class. The differences are:",
				"Interfaces cannot have properties, while abstract classes can.",
				"All interface methods must be public, while abstract class methods must be public or protected",
				"All methods in an interface are abstract, so they cannot be implemented in code ",
				"and the abstract keyword is not necessary.",
				"Classes can implement an interface while inheriting from another class at the same time.",
				"Abstract classes can not do this.",
                "\t",
				"If you want to write a method that must be declared the tasks by another class,",
				"you can use interface class. A class that declares the tasks for a method inside an interface class",
				"can write all the things a normal class can do and can also inherent all the features ",
				"from a different parent class.",
				"*/",
				"\t",
				"class Animal_collection{",
				"   public function __construct(\\$type,\\$kind){",
				"      \\$this->type = \\$type;",
				"      \\$this->kind = \\$kind;",
				"   }",
				"}",
				"",
				"trait Introduction{",
				"   public function Intro(){",
				"       return \" ",
				"       The first animal is: \\$this->type, kind: \\$this->kind.<br>",
				"       \"; ",
				"   }",
				"   public function Intro2(){",
				"       return \"  ",
				"       The second animal is: \\$this->type, kind: \\$this->kind.<br>",
				"       \";  ",
				"   }",
				"}",
				"\t",
				"interface Animals_type{",
				"   public function Type ();",
				"}",
				"\t",
				"class Pet1 extends Animal_collection implements Animals_type{",
				"   use Introduction;",
				"   public function Type (){",
				"       return \\$this->Intro();",
				"   }",
				"} ",
				"class Pet2 extends Animal_collection implements Animals_type{",
				"   use Introduction;",
				"   public function Type (){",
				"      return \\$this->Intro2();",
				"   }",
				"} ",
				"\t",
				"\\$pet_1_obj = new Pet1('Dog','Pets');",
				"\\$pet_2_obj = new Pet1('Cat','Pets');",
				"echo \\$pet_1_obj->Type();",
				"echo \\$pet_2_obj->Type();",
				"",
				"/*output",
				"The first animal is: Dog, kind: Pets.",
				"The first animal is: Cat, kind: Pets.",
				"*/",
				"//You can try to loop through each instance.",
				"\\$animals = array(\\$pet_1_obj,\\$pet_2_obj);",
				"foreach(\\$animals as \\$val){",
				"   echo \\$val->Type();",
				"}",
				"/*output",
				"The first animal is: Dog, kind: Pets.",
				"The first animal is: Cat, kind: Pets.",
				"*/",
		],
		"description":"Inserting a block of syntaxes that includes interface class, parent class, two children classes, and a trait class"
	 },


	 "While loop, do...while loop":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_whileDoWhileLoop",
		"body": [
			"\\$num1 = 1;",
			"while(\\$num1 <=10){",
			"   echo '<h1>Number: '.\\$num1.'</h1> <br/>';",
			"   \\$num1++;",
			" //You can consider using 'break' or 'continue' keyword ",
			"}",
			"\t",
			"//while loop backward",
			"\\$num1 = 10;",
			"while(\\$num1 >1){",
			"   echo '<h1>Number: '.\\$num1.'</h1> <br/>';",
			"   \\$num1--;",
		    "}",
			"\t",
			"//while loop through an array",
			"\\$text1 = array('el1','el2','el3');",
			"\\$i = 0;",
			"while(\\$i <= count(\\$text1)-1){",
			"   echo '<h1> '.\\$text1[\\$i].'</h1> <br/>';",
			"   \\$i++;",
			"}",
			"\t",
			"//while loop through an array backward",
			"\\$text1 = array('el1','el2','el3');",
			"\\$i = count(\\$text1);",
			"while(\\$i--){",
			"   echo '<h1> '.\\$text1[\\$i].'</h1> <br/>';",
			"}",
			"\t",
			"//while loop through a string",
			"\\$text1 = 'Welcome';",
			"\\$i = 0;",
			"while(\\$i <= strlen(\\$text1)-1){",
			"   echo '<h1> '.\\$text1[\\$i].'</h1> <br/>';",
			"   \\$i++;",
			"}",
			"\t",
			"//while loop through a string backward",
			"\\$text1 = 'Welcome';",
			"\\$i = strlen(\\$text1);",
			"while(\\$i--){",
			"   echo '<h1> '.\\$text1[\\$i].'</h1> <br/>';",
			"}",
			"\t",
			 "//or",
			 "\\$text = 'welcome';",
			 "\\$i = strlen(\\$text)-1;",
			 "while(\\$i>=0){",
			 "  echo \\$text[\\$i].'<br>';",
			 "   \\$i--;",
			 "}",
			"\t",
			"//do...while loop",
			"//The way to use do while loop is as same as JavaScript",
			"do {",
			"//output something ",
			" //You can consider using 'break' or 'continue' keyword ",
			"}while(/*condition*/);",
		  
	  


		],
		"description": "Adding syntaxes of while loop, and do while loop syntax"
	 },



	 "For loop, foreach loop":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_for_foreachLoop",
		"body": [
			
		  "//for loop is as same as JavaScript syntax",
		  "for (/*init counter*/; /*test counter*/; /*increment counter*/) {",
		  "  //code to be executed for each iteration;",
		  " //You can consider using 'break' or 'continue' keyword ",
		  "}",
		  "\t",
		   "//for loop through array and string",
		   "\\$car_list = array('BMW','Mercedes-Benz','Huyndai','Porsche');",
		   "\\$text = 'welcome';",
		   "\t",
		   "for(\\$i = 0; \\$i<strlen($text);\\$i++){",
			"   echo  \\$text[\\$i].'<br>';",
		   "};",
		   "for(\\$i = 0; \\$i<count(\\$car_list);\\$i++){",
			"  echo  \\$car_list[\\$i].'<br>';",
		   "};",
		  "\t",
		  "\t",
		  "//foreach loop",
		  "foreach (\\$array as \\$value) {",
		  "  //code to be executed;",
		  "}",
		  "\t",
		  "//Example",
		  "\\$colors = array('Blue','Green','Black');",
		  "foreach(\\$colors as \\$value){",
		  "  echo \\$value. '<br>';",
		  "}",
		  "/*",
		  "output",
		  "Blue",
		  "Green",
		  "Black",
		  "*/",
		  "\t",
		  "//The following example will output both the keys and the values of the given array (\\$age):",
		  "\\$age = array('Henry'=>'30','Mike'=>'28','Helena'=>'35');",
		  "foreach(\\$age as \\$x=>\\$value){",
		  "    echo 'Name:'.\\$x.'. Age:'.\\$value.'<br>';",
		  "}",
	  


		],
		"description": "Adding syntaxes of for loop, and foreach loop syntax"
	 },


	 "Function":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_function",
		"body": [
			"//Basic Function",
			"function ${1:function_name}(){",
			 "   // output something",
			 "   return /*something*/   ;",
			"};",
			"/*Calling this function:*/",
			"${1:function_name}();",
			"\t",
			"\t",
			"//Function with parameters and is called with arguments",
			"function ${1:function_name}(\\$para1,\\$para2){",
			 "   // output something",
			 "   return /*something*/   ;",
			"};",
			"/*Calling this function:*/",
			"${1:function_name}('val1','val2');",
			"\t",
			"\t",
			"//Function that can pass arguments by reference",
			"//When a function argument is passed by reference, changes to the argument also ",
			"//change the variable that was passed in. ",
			"//To turn a function argument into a reference, the & operator is used",
			"\t",
			"\\$screwdriver = 'screwdriver';",
			"function Searching(&\\$item){",
			"   return 'I am searching for an item called: '.\\$item;",
			"}",
			"echo Searching(\\$screwdriver);",
			"//output I am searching for an item called: screwdriver",
			"\t",
			"\t",
			"//Function with definive type parameters and is called with arguments",
			"//most used data type of parameters are: int, string, array, bool, object, Class, float ",
			"//Make sure you specified 'php declare(strict_types=1);' at the beginning of PHP file",
			"function ${1:function_name}(data_type \\$para1,data_type \\$para2){",
			 "   // output something",
			 "   return /*something*/   ;",
			"};",
			"/*Calling this function:*/",
			"${1:function_name}('val1','val2');",
			"//EX:",
			"function Multiply(int \\$num1, int \\$num2){",
			"   echo \\$num1*\\$num2;",
			"}",
			"Multiply(245,6757);",
			"\t",
			"\t",
			"//Function with definive type parameters using a default value and is called with arguments",
			"//The following function has a default parameter's value. If we don't call a value as argument",
			"//, then it will take that default value",
			"function Welcome(string \\$name = 'HP'){",
			"    return 'Hello '.\\$name;",
			"}",
			"echo Welcome();",
			"\t",
			"\t",
			"//Declare type for the return statement of a function with ",
			"//specified parameter with its own type declaration",
			"\t",
			"function Welcome(string \\$car_number,int \\$car_price) :int{",
			"   return \\$car_number*\\$car_price;",
			"//You can specify a different return type than the argument types",
			"// return (int)(\\$car_number*\\$car_price);",
			"}",
			"echo 'Total Price: '.Welcome('5 Cars',356000); //output: Total Price: 1780000",
			"\t",
			"\t",
			" /*",
			"An iterable is any value which can be looped through with a foreach() loop.",
			"When you specified the ‘iterable’ data type, you must use 'foreach' loop through the value one way or another.",
			"The iterable keyword can be used as a data type of a function argument or as the return type of a function.",
			"\t",
			"*/",
			"function Car(iterable \\$model){",
			"   foreach(\\$model as \\$val){",
			"      echo \\$val.'<br>';",
			"   }",
			"}",
			"Car([\"Lexus\",\"Lamborghini\",\"Ford\",\"Honda\"]);",
			"/*output",
			"Lexus",
			"Lamborghini",
			"Ford",
			"Honda",
			"*/",
			"\t",
			"function Brand() : iterable{",
			"   return ['Lexus','Ford','Pagani'];",
			"}",
			"foreach(Brand() as \\$val){",
			"   echo \\$val.'<br>';",
			"}",
			"/*output",
			"Lexus",
			"Ford",
			"Pagani",
			"*/",
			"\t",
			"\t",
			"/*",
  			"A callback function (often referred to as just 'callback') is a function which is passed as an argument ",
  			"into another function.",
  			"Any existing function can be used as a callback function. To use a function as a callback function, ",
  			"pass a string containing the name of the function as the argument of another function.",
  			"*/",
  			"function Model(\\$model){",
				"return 'Model: '.\\$model.'.<br>';",
			"}",
			"function Car(\\$model,\\$format){",
				"return \\$format(\\$model);",
			"}",
			"echo Car('Bugatti-Chiron','Model');",
			"/*output",
			"Model: Bugatti-Chiron.",
			"*/",


		],
		"description": "Inserting a block of syntaxes that contains all type of mostly used PHP Function"
	 },



	 "Some most commonly used regular expression method":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_regularExpressionMethods",
		"body": [
			"\\$text = 'welcome';",
			"\\$pattern = '/wel/im';//pattern is any regular expression technique",
			"echo preg_match(\\$pattern,\\$text);//if wel keyword exists in \\$text, output 1. Otherwise, output 0.",
			"\t",
			"\\$pattern2 = '/e/im';",
			"echo preg_match_all(\\$pattern2,\\$text);//output 2 because there are 2 'e' letters in \\$text;",
			"\t",
			"echo preg_replace(\\$pattern2,'E',\\$text);",
			"//output wElcomE because syntax replaces any 'e' letter",
			"//exists in \\$text by 'E' letter.",
		],
		"description": "Inserting a block of syntaxes that contains 3 most commonly used regular expression method"
	 },

	 "Date methods":{

		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_datetime",
		"body": [
			"//date(format). Note that this method helps program automatically update date or time.",
			"// It only returns the current date and time of the server. You must specify the time zone",
			"// to get the correct date time of your area",
			"// Y is year, m is month, d is day", 
			"\t",
            "date_default_timezone_set('America/Los_Angeles');",
			"//you can go to https://www.php.net/manual/en/timezones.php website to find out your timezone",
			"\t",
			"echo 'Today is '.date('Y/m/d').'<br>'; //output Today is 2022/07/18",
			"//Notice that date and time is automatically updated",
			"echo 'Today is '.date('l').'<br>';//output Today is Monday",
			"//Here is how to get time",
			"//H is 24 hour format",
			"//h is 12 hour format",
			"//i is minutes, s is second, a is am or pm",
			" echo 'Now is '.date('H:i:s:a').'<br>';//output Now is 19:36:55:pm",
			"\t",
			"//The strtotime() method is used to convert a human readable date string into unix timestamp ",
			"\\$d = strtotime('next Monday');",
			"echo 'Next Monday is '.date('m/d/Y',\\$d); ",
			"//output Next Monday is 07/25/2022 "




		],
		"description": "Inserting a block of syntaxes that contains common date and time methods"
	 },


	 "Include, Require":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_IncludeRequire",
		"body": [
			"//Both include and require method are used to add content of another php file into your file",
			"//It can help you calling or use variable, function, class,... from other website too.",
			"//Please use include() when you want the program continue to be executed if the file you include",
			"//doesn't exist. require() will generate error if the file doesn't exist",
			"include('filename.php'); // or require('filename.php');",
			"//Ex: include('test2.php');"
		],
		"description": "Inserting a block of syntaxes that contains include and require method to add content from other page into your page."
	 },


	 "Namespace":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_namespace",
		"body": [
			"namespace any_name;",
		    "//Ex: ",
			"\t",
			"//Syntax  test2.php",
			"<?php",
			"declare(strict_types =1);",
            "namespace Car_collection;",
			"\t",
			"\t",
			"   class Car {",
			"\t",	
			"      public \\$Model,\\$Brand;",
			"\t",
			"      public function __construct(\\$Model,\\$Brand){",
			"        \\$this->model = \\$Model;",
			"        \\$this->brand = \\$Brand;",
			"      }",
			"      public function Introduction(){",
			"          return 'This is a model: '.\\$this->model.'. Brand: '.\\$this->brand;",
			"      }",
			"\t",	
			"\t",
			"   }",
			"\t",
			"\t",
   			"?>",

			   "\t",
			   "//Syntax  test1.php",
			   "\t",
			   "<?php",
				"require('test2.php');",
				"use Car_collection as CL;",
				"use Car_collection\\Car as CLCR;  ",
				"\\$car_obj =  new CL\\Car('Bentley-325467','Bentley');",
				"\\$car_obj2 =  new CLCR('KIA-morning-65784356','KIA-morning');",
				"echo \\$car_obj->Introduction().\"<br>\";",
				"echo \\$car_obj2->Introduction();",
				"/*output",
				"This is a model: Bentley-325467. Brand: Bentley",
				"This is a model: KIA-morning-65784356. Brand: KIA-morning",
				"*/",
				"\t",
				"?>",

		],
		"description": "Inserting a block of syntaxes that contains how to declare namespace and how to use it."
	 },



	"Connect to MySQL database":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_connectMySQLDatabase",
		"body":[
			"<?php",
			"/*These syntaxes below will help you connect to MySQL database system",
			"using PDO technique*/",
			"\t",
			"\\$servername = '${1:yourlocalhost}';",
			"\\$user = '${2:yourusername}';",
			"\\$password = '${3:yourpassword}';",
			"\\$database= '${4:yourdatabase}';",
            "\t",
			"try{",
			"   \\$acc = 'mysql:host='.\\$servername.';dbname='.\\$database;",
			"   \\$conn = new PDO(\\$acc,\\$user,\\$password);",
			"// set the PDO error mode to exception",
			"   \\$conn->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
			"   echo 'Connected successfully!!!';",
			"}catch(PDOException \\$e){",
			"   echo 'Connection failed: '. \\$e->getMessage();",
			"}",
            "\t",
			"\\$conn = null;",
			"?>",
		],
		"description": "Inserting a block of PHP syntaxes to connect to MySQL database system using PDO technique"
	},


	"Create a database for MySQL database":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_createDatabaseMySQLDatabase",
		"body":[
			"<?php",
			"/*These syntaxes below will help you create a database for MySQL database system",
			"using PDO technique*/",
			"\t",
			"\\$servername = '${1:yourlocalhost}';",
			"\\$user = '${2:yourusername}';",
			"\\$password = '${3:yourpassword}';",
            "\t",
			"try{",
			"   \\$acc = 'mysql:host='.\\$servername;",
			"   \\$conn = new PDO(\\$acc,\\$user,\\$password);",
			"// set the PDO error mode to exception",
			"   \\$conn->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
			"   \\$query1 = 'CREATE DATABASE ${4:database_name}';",
			"   // use exec() because no results are returned",
			"   \\$conn->exec(\\$query1);",
			"   echo '<h3>${4:database_name} database created!!!</h3> <br>';",
			"}catch(PDOException \\$e){",
			"   echo \\$query1 . '<br>'. \\$e->getMessage();",
			"}",
            "\t",
			"\\$conn = null;",
			"?>",
		],
		"description": "Inserting a block of PHP syntaxes to create a database for MySQL database system using PDO technique"
	},




	"Create a table in a database for MySQL database":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_createTableForDatabaseMySQLDatabase",
		"body":[
			"<?php",
			"/*These syntaxes below will help you create a table in a database for MySQL database system",
			"using PDO technique*/",
			"\t",
			"\\$servername = '${1:yourlocalhost}';",
			"\\$user = '${2:yourusername}';",
			"\\$password = '${3:yourpassword}';",
			"\\$database= '${4:database_name}';",
            "\t",
			"try{",
			"   \\$acc = 'mysql:host='.\\$servername.';dbname='.\\$database;",
			"   \\$conn = new PDO(\\$acc,\\$user,\\$password);",
			"// set the PDO error mode to exception",
			"   \\$conn->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
			"   \\$query1 = 'CREATE TABLE ${5:table_name} (",
			"          column_name data_type constraint,",
			"          column_name2 data_type constraint,",
			"          Additional constraint",
			"      )';",
			"   // use exec() because no results are returned",
			"   \\$conn->exec(\\$query1);",
			"   echo '<h3>${5:table_name} table created!!!</h3> <br>';",
			"}catch(PDOException \\$e){",
			"   echo \\$query1 . '<br>'. \\$e->getMessage();",
			"}",
            "\t",
			"\\$conn = null;",
			"?>",
		],
		"description": "Inserting a block of PHP syntaxes to create a table in a database for MySQL database system using PDO technique"
	},



	"Insert data into a table of a database for MySQL database":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_insertDataToTableMySQLDatabase",
		"body":[
			"<?php",
			"/*These syntaxes below will help you insert data to a table in a database for MySQL database system",
			"using PDO technique*/",
			"\t",
			"\\$servername = '${1:yourlocalhost}';",
			"\\$user = '${2:yourusername}';",
			"\\$password = '${3:yourpassword}';",
			"\\$database= '${4:database_name}';",
            "\t",
			"try{",
			"   \\$acc = 'mysql:host='.\\$servername.';dbname='.\\$database;",
			"   \\$conn = new PDO(\\$acc,\\$user,\\$password);",
			"// set the PDO error mode to exception",
			"   \\$conn->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
			"   \\$query1 = 'please provide SQL INSERT INTO syntax here",
			"    and change the single quotation mark into double quotation mark",
			"     ';",
			"   // use exec() because no results are returned",
			"   \\$conn->exec(\\$query1);",
			"   echo '<h3>Inserted data successfully</h3> <br>';",
			"}catch(PDOException \\$e){",
			"   echo \\$query1 . '<br>'. \\$e->getMessage();",
			"}",
            "\t",
			"\\$conn = null;",
			"\t",
			"/*Those syntaxes below will help you insert multiple data.*/",
			"try{",
			"   \\$acc = 'mysql:host='.\\$servername.';dbname='.\\$database;",
			"   \\$conn = new PDO(\\$acc,\\$user,\\$password);",
			"// set the PDO error mode to exception",
			"   \\$conn->setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
			"   \\$query1 = 'please provide SQL INSERT INTO syntax here",
			"    and change the single quotation mark into double quotation mark",
			"     ';",
			"   \\$query2 = 'please provide SQL INSERT INTO syntax here",
			"    and change the single quotation mark into double quotation mark",
			"     ';",
            "\t",
			"     \\$conn->beginTransaction(); // begin the transaction",
			"\t",
			"   \\$conn->exec(\\$query1);",
			"   \\$conn->exec(\\$query2);",
			"\t",
			"     \\$conn->commit(); //commit the transaction",
			"   echo '<h3>Inserted data successfully</h3> <br>';",
			"}catch(PDOException \\$e){",
			"   //roll back the transaction if something failed",
			"   \\$conn -> rollback();",
			"   echo '<h1>ERROR '. \\$e->getMessage().' </h1>';",
			"}",
            "\t",
			"\\$conn = null;",
			"?>",
		],
		"description": "Inserting a block of PHP syntaxes to insert data into a table of a database for MySQL database system using PDO technique"
	},

	
	"Prepare and Insert data into a table of a database for MySQL database":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_prepareInsertDataToTableMySQLDatabase",
		"body": [
			"<?php",

				"   \\$host = '${1:yourlocalhost}';",
				"   \\$user = '${2:yourusername}';",
				"   \\$pass = '${3:yourpassword}';",
				"   \\$database= '${4:database_name}';",
                "\t",
				"   try{",
				"   \\$access = 'mysql:host='.\\$host.';dbname='.\\$database;",
				"   \\$conn = new PDO(\\$access,\\$user,\\$pass);",
				"   \\$conn -> setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
				"\t",
				"   \\$query1 = 'INSERT INTO table_name (Id,Name) ",
				"   VALUES (:Id,:Name)';",
				"\t",
				"   //Prepare and bind parameters",
				"   \\$stmt = \\$conn->prepare(\\$query1);",
				"\t",
				"   \\$stmt->bindParam(':Item_id',\\$Id);",
				"   \\$stmt->bindParam(':Name',\\$Name);",
				"\t",
				"   //Insert a row",
				"   \\$Id = 'yourid_value';",
				"   \\$Name = 'yourname_value';",
				"   \\$stmt->execute();",
				"\t",
				"   //Insert another row",
				"   \\$Id = 'yourid_value';",
				"   \\$Name = 'yourname_value';",
				"   \\$stmt->execute();",
				"\t",
				"   echo 'Insert data successfully';",
				"\t",
				"  }catch(PDOException \\$e){",
				"  echo 'Error: '.\\$e->getMessage();",
				"  }",
				"\t",
				"  \\$conn = null;",
			"?>"

		],
		"description": "Inserting a block of PHP syntaxes to prepare and insert data into a table of a database for MySQL database system using PDO technique"
	},


	"Select data from a table of a database of MySQL database system using PDO technique":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_selectDataToTableMySQLDatabase",
		"body": [
		"  try{",
		"    \\$access_database_info = 'mysql:host='.\\$web_host.';dbname='.\\$database_name;",
		"    \\$conn = new PDO(\\$access_database_info,\\$admin,\\$admin_database_pass);",
		"    \\$conn -> setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
		"    \\$query1 = 'SELECT Customer_Name,Customer_Username FROM customers WHERE Customer_Username = :seek_username';",
			"\t",	
		"  \\$stmt = \\$conn->prepare(\\$query1);",
		"\t",
		"   \\$stmt->bindParam(':seek_username',\\$seek_username);",
		"\t",
		"   \\$seek_username = 'Timmycoder97';",
		"\t",
		"   \\$stmt ->execute();",
		"\t",
		"   \\$select_result = \\$stmt->fetch(); // After fetch , the result will be an array and each value of each column will be places as each element of this array.  I have to specify a variable so that I can work with While loop",
		"   \\$i = 0;",
		"\t",
		"     echo '<table id=`table1`>';",
		"     echo '<tr>';",
		"     echo '   <th>Name</th>';",
		"     echo  '  <th>Username</th> ';",
		"     echo '</tr>';",
		"     echo '<tr>';",
		"\t",
		"     while(\\$i<count(\\$select_result)){",
		"         echo '<td>'.\\$select_result[\\$i].'</td>';",
		"         \\$i++;",
		"         if(\\$i>1){  // I use this condition because the output will have more than 2 value",
		"            break;",
		"         }",
		"\t",
		"      }",
		"      echo '</tr>';",
		"      echo '</table>';",
		"\t",
	    "//You can see that I write a lot of syntax to make a table which is way more complicated",
		"//than using for loop to loop through each JavaScript Array. I can not use for loop in this situation",
		"//since doing so makes each value placed in each row. In the worst case, \\$select_result may return",
		"//a string ",
				 
	    " }catch(PDOException \\$e){",
		"    echo 'ERROR: '.\\$e->getMessage();",
		" } ",
		"\t",
		"  \\$conn = null;",

		"/*",
		"*If you want to check how many row returns, you can work with this syntax: ",
        "\\$row = \\$stmt->rowCount();",
        "*/",
		"\t",
		"//The example below is going to use fetchAll() or fetchAll(PDO::FETCH_ASSOC)",
		"   \\$select_result = \\$stmt->fetchAll(PDO::FETCH_ASSOC);",
		"\t",
        "   echo '<table id=`table1`>';",
        "   echo '<tr>';",
        "   echo '   <th>Name</th>';",
        "   echo  '  <th>Username</th> ';",
        "   echo '</tr>';",
        "   echo '<tr>';",
        "  foreach(\\$select_result as \\$val){",
        "      echo '<td>'.\\$val['Customer_Name'].'</td>';",
        "      echo '<td>'.\\$val['Customer_Username'].'</td>';",
        "  }",
        "   echo '</tr>';",
        "   echo '</table>';",


	  
	
		],
		"description": "Inserting a block of PHP syntaxes to select data from a table of a database in MySQL database system using PDO technique"
	},


	"Validate login form data with MySQL data":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_validateLoginFormWithMySQLdata",
		"body": [
	
				"   \\$web_host = 'localhost';",
				"   \\$admin = 'phuongcoderinfinity';",
				"   \\$admin_database_pass='butcherfithack97';",
				"   \\$database_name = 'tgh_car_dealership';",
				"\t",
				"     try{",
				"      \\$access_database_info = 'mysql:host='.\\$web_host.';dbname='.\\$database_name;",
				"      \\$conn = new PDO(\\$access_database_info,\\$admin,\\$admin_database_pass);",
				"      \\$conn -> setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
				"\t",
				"\t",
				"\t",
				"      }catch(PDOException \\$e){",
				"          echo 'ERROR: '.\\$e->getMessage();",
				"      } ",
				"\t",
				"      function validate_login_func(\\$data){",
				"        \\$data = trim(\\$data);",
				"        \\$data = stripslashes(\\$data);",
				"        \\$data = htmlspecialchars(\\$data);",
				"        return \\$data;",
				"      }",
				"\t",
				"\t",
				"      \\$username_login = \\$pass_login = '';",
				"\t",
				"\t",
				"      if(\\$_SERVER['REQUEST_METHOD'] == 'POST'){",
				"\t",
				"           \\$query1 = 'SELECT Customer_Username,Customer_Password,Customer_Avatar ",
				"            FROM customers WHERE Customer_Username = :seek_username AND Customer_Password = :seek_password' ;",
				"\t",
				"            \\$stmt = \\$conn->prepare(\\$query1);",
				"\t",
				"            \\$stmt->bindParam(':seek_username',\\$seek_username);",
				"            \\$stmt->bindParam(':seek_password',\\$seek_password);",
				"\t",
				"             if(empty(\\$_POST['username_input'])){",
				"                  \\$_SESSION['username_err_message'] = 'Username is required!!!';",
				"              }",
				"\t",
				"             if(empty(\\$_POST['password_input'])){",
				"               \\$_SESSION['password_err_message'] = 'Password is required!!!';",
				"             } ",
				"\t",
				"\t",
				"             if(isset(\\$_POST['username_input']) && isset(\\$_POST['password_input'])){",
				"               \\$username_login = validate_login_func(\\$_POST['username_input']);",
				"               \\$seek_username =  \\$username_login;",
				"               \\$pass_login = validate_login_func(\\$_POST['password_input']);",
				"               \\$seek_password = \\$pass_login;",
				"\t",
				"\t",
				"               \\$stmt ->execute();",
				"               \\$row = \\$stmt->rowCount();",
				" \t",
				"               \\$select_result = \\$stmt->fetch(); ",
				"\t",
				"                    if(\\$row>0){",
				"                        \\$_SESSION['user_loggedin'] = true;",
				"                        \\$_SESSION['tgh_car_dealership_username'] = \\$username_login;",
				"                        header('location: main_page.php');",
				"                        ",
				"                    }else{",
				"                        \\$_SESSION['user_loggedin_failed'] = true;",
				"                        header('location: main_page.php');",
				"                        ",
				"                    }",
				"\t",
				"                 \\$conn = null;",
				"\t",
				"\t",
				"\t",
				"               }",
				"\t",
				" }",

	  
	
		],
		"description": "Inserting a block of PHP syntaxes to validate login form data with MySQL data"
	},


	"Logout system":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_LogoutSystem",
		"body": [
			"<?php; ",
			"//Logout system just needs those below syntaxes to be put in a separate file.",
			"//You just need to link a button to this file to help any user logout their account by clicking logout button.",
			"session_start();",
			"\t",
			"session_unset();",
			"session_destroy();",
			"\t",
			"header('location: filename.php');",
			"?>",
		],
		"description": "Inserting a block of PHP syntaxes to make a logout system that help user log out of their account."
	},

	"Cookie":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_cookie",
		"body": [
			"setcookie() method must be placed before html tag and it must be inside php tag",
			"setcookie(name,value,expire,path,domain,secure,http_only);",
			"//only name and value is required, other things are optional!!!",
			"//EX: setcookie('cookie_id','3467687');",
			"\t",
			"//If you want a cookie to be existed only 1 day, then you can specify expire ",
			"// as time() + 86400. 86400=60*60*24. time() returns the current timestamp",
			"//EX: setcookie('cookie_id',151313,time() + 86400);",
			"\t",
			"//If you want to modify a cookie, just use setcookie function to set it again with different value",
			"//If you want to delete a cookie, use the setcookie with a specific name, value, and a negative value ",
			"//for the expire",
			"//EX: setcookie('cookie_id','',time()-86400);",
			"\t",
			"//Check if cookies are enabled",
			"//First write setcookie('test_cookie','test',time()+3600,'/');  at the beginning of php file",
			"//then add the syntaxes below",
			
			"<?php",
 			"\t",
			"if(count(\\$_COOKIE)>0){",
			"   echo 'Cookies are enabled!!!';",
			"}else{",
			"   echo 'Cookies are disabled!!!';",
			"}",
 			"\t",
			"?>",
			"\t",
			"\t",
			"//check and retrieve the a cookie with its value",
			"setcookie('customer_id','CUS-13483331',time()+(86400*30)); //86400*30 is going to be 30 days",
			"if(!isset(\\$_COOKIE['customer_id'])){",
			"   echo 'customer_id cookie is not available!!';",
		    "}else{",
			"   echo 'customer_id cookie is available!!!';",
			"   echo 'customer_id cookie value is: '.\\$_COOKIE['customer_id'];",
		    "}",


		],
		"description": "Adding a block of PHP syntaxes to set cookie"
	},

	"Session":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_session",
		"body": [
			"//session is used to set, transfer, and retrieve data across different web pages",
			"//add syntax   session_start(); on every page you want to set and get session variables",
			"//at the begining of the page (before html tag)",
			"//if you want to set session, you can declare a session variable like below",
			"\\$_SESSION['session_name'] = 'value'; ",
			"//Now go to a different php page. Make sure it has session_start() at the top of the page",
			"//Then, write:",
			"<?php echo \\$_SESSION['session_name'];?>",
			"\t",
			"\\In order to modify a session variable, you just need to set it with another value in the file",
			"\\you used to set it",
			"\t",
			"//Below are syntaxes to unset and destroy session variables",
			"session_unset();//remove all the session variables",
			"session_destroy();//destroy all the sessions",

		],
		"description": "Adding a block of PHP syntaxes to set session or work with session"
	},

	"Open,read file":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_fileOpenRead",
		"body": [
			"\\$test2_php_file = fopen('test2.php','r+') or die('Unable to open and read test2.php file!!!');",
			"echo  fread(\\$test2_php_file,filesize('test2.php'));",
			"fclose(\\$test2_php_file);",
			"\t",
			"\\$test2_php_file = fopen('test2.php','w+') or die('Unable to open and read test2.php file!!!');",
			"echo  fread(\\$test2_php_file,filesize('test2.php'));",
			"fclose(\\$test2_php_file);",
			"\t",
			"\\$test2_php_file = fopen('test2.php','a+') or die('Unable to open and read test2.php file!!!');",
			"echo  fread(\\$test2_php_file,filesize('test2.php'));",
			"fclose(\\$test2_php_file);",
			"\t",
			"//r+ open a file for read/write. File pointer starts at the beginning of the file.",
			"//r open a file for read only.......",
			"//w+ open a file for read/write. Erases the contents of the file or creates a new file if",
			"//it doesn't exist. File pointer starts at the beginning of the file.",
			"//w open a file for write only.......",
			"//a+ open a file for read/write. The existing data is preserved. File pointer starts at",
			"//the end of the file. Creates a new file if it doesn't exist.",
			"//a open a file for write only........",
			"\t",
			"//fread() function reads from an open file",
			"//The second parameter specifies the maximum number of bytes to read",
			"//fclose() function closes the open file",
			"\t",
			"//If the file you want to read contains text or html element, you can see them from the output",
			"//on your site. Otherwise, you can only see the number of bytes output"

		],
		"description": "Adding a block of PHP syntaxes to open,read file)"
	},


	"Write content to a file":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_fileWriteContent",
		"body": [
			"\\$open_file = fopen('text1.txt','w+') or die('Unable to open file!!!');",
			"fwrite(\\$open_file,'Welcome to this site');",
		   "fclose(\\$open_file);",
		    "\t",
		   "\\$open_file = fopen('text1.txt','a+') or die('Unable to open file!!!');",
			"fwrite(\\$open_file,'Hello');",
		   "fclose(\\$open_file);",
		],
		"description": "Adding a block of PHP syntaxes to write content to a file after the program opened and read it"
	},

	"Read a single line of a file":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_fileSingleLineRead",
		"body": [
			"\\$open_file = fopen('text1.txt','r+') or die('Unable to open and read file!!!');",
			"echo fgets(\\$open_file);",
			"fclose(\\$open_file);",
		],
		"description": "Adding a block of PHP syntaxes to read a single line of a file after the program opened"
	},

	"Read each line from the beginning to the ending line of a file":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_fileReadEachSingleLineFromStartToEndOfAFile",
		"body": [

			"\\$open_file = fopen('test2.php','r+') or die('Unable to open and read file!!!');",
			" while(!feof(\\$open_file)){",
			"//The feof function checks if a file reaches the ending line or not.",
			"//It's useful for looping through each line of a file until the end of that file when you don't",
			"//know how many data or line that file has",
			"    echo fgets(\\$open_file);",
			" }",
			"fclose(\\$open_file);",
            "\t",
            "\t",
            "//The example below opens and reads each line of a file and write all those contents into a new file",
			"\\$open_file = fopen('test2.php','r+') or die('Unable to open file!!!');",
			"\\$open_file2 = fopen('text1.txt','w+') or die('Unable to open file!!!');",
			"while(!feof(\\$open_file)){",
			"   fwrite(\\$open_file2,fgets(\\$open_file));",
			"}",
			"fclose(\\$open_file);",
		],
		"description": "Adding a block of PHP syntaxes to read each single line of a file from the beginning to the end after the program opened"
	},




	"Create a folder":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_fileCreateFolder",
		"body": [
           "mkdir('');//ex: mkdir('Image') is going to create Image folder."
			
		],
		"description": "Adding a block of PHP syntaxes to help create a folder"
	},


	
	"JSON encode, decode ":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_jsonEncodeDecode",
		"body": [
			"//json_encode function encode a value to JSON format",
			"\\$car = array('Model1'=>'Tesla','Model2'=>'Ford','Model3'=>'Huyndai');",
			"echo json_encode(\\$car);//output is an object {'Model1':'Tesla','Model2':'Ford','Model3':'Huyndai'}",
			"\t",
			"\\$car2 = array('Tesla','Ford','Huyndai');",
			"echo json_encode(\\$car2);//output is an array ['Tesla','Ford','Huyndai']",
			"\t",
			"//json_decode function decode a JSON object into a PHP object or an associative Array",
			"//The 'true' second parameter value of json_decode will turn the result into an associative Array",
			"\\$car = '[\"BMW\",\"Honda\",\"Suzuki\"]';",
			"echo json_decode(\\$car); //output Array",
			"echo var_dump(json_decode(\\$car));//var_dump dumps information about one or more variables",
			"//The information holds type and value of the variables.",
			"//Dumps information means convert it into string format so it can be used for parsing, printing, etc.",
			"\t",
			"//The example below will show you how to access a property value of an object after it was decoded from a JSON object",
			"\\$car = '{\"Model1\":\"Mercedes-Benz\",\"Model2\":\"Chervolet\",\"Model3\":\"Pagani\"}';",
			"\\$car_obj = json_decode(\\$car);",
 			"echo \\$car_obj->Model;",
			"\\$car_obj2 = json_decode(\\$car,true);",
			"echo \\$car_obj2['Model2'];",
			"//You can use foreach(\\$car_obj as \\$key => \\$val) to return many values if you like"
			
		],
		"description": "Adding a block of PHP syntaxes to work with JSON encode or decode"
	},



	"JSONP example ":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_jsonp",
		"body": [
			"//syntax in test1.php",
			"<div id=\"block1\"></div>",
            "\t", 
			"<script>",
			"   function loadData(parse_data){",
			"        document.getElementById('block1').innerHTML = parse_data.model1.price;",
			"   }",
			"</script>",
			"\t",
			"<script src='test2.php'></script>",
			"\t",
			"\t",
			"//syntax in test2.php",
			"<?php",
			"\\$json1 = '{",
			"\t",
			"   \"model1\": {",
			"       \"name\":\"Pagani_Huayra_roadster_2022\",",
			"       \"price\":\"\\$4,568,235\" ",
			"    }",
			"\t",
			"}';",
			"\t",
			"echo 'loadData('.\\$json1.')';",
			"\t",
			"?>",
			
		],
		"description": "Adding a block of PHP syntaxes to work with JSONP to parse and get JSON data from different pages"
	},



	"Handling Error with Exception method":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_ErrorHandlingException",
		"body":[
			
			"function Check_Rice_Amount(string \\$amount) :string {",
			"   if(\\$amount > '100 KG'){",
			"   //The Exception function object returns the error or unexpected behaviour that the program may encountered. ",
			"       throw new Exception('Amount is too high!!!',133956875131398);",
			"       //The first parameter of Exception function is error message.",
			"       //The second parameter of Exception function is error code.       ",
			"   }else{",
			"        return 'You buy '.\\$amount.' of white rice';",
			"   }",
			"}",
			"try{",
			"   echo Check_Rice_Amount('101 KG');",
			"}catch(Exception \\$e){",
			"   echo 'Error case: '.\\$e->getMessage().'. Code: '.\\$e->getCode().",
			"   '.<br> Line: '.\\$e->getLine().'. File: '.\\$e->getFile().'<br>';",
			"}finally{",
			"   echo 'Testing Done!!!';",
			"   // finally statement is going to run no matter if the program throw an error or not",
			"}",
			"//Output",
			"//Error case: Amount is too high!!!. Code: 133956875131398.",
			"//Line: 98. File: C:/xampp/htdocs/php_project/test1.php",
			"// Testing Done!!!",
		],
		"description": "Adding a block of PHP syntaxes to handling error with Exception method"
	},


	"PHP Filter":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_filter",
		"body": [
			"//Syntaxes to list how many filter extensions PHP offers. Remember to use CSS to style the table :",
			"<table id='table1'>",
			"    <tr>",
			"        <th>Filter Name:</th>",
			"        <th>Filter Id:</th>",
			"    </tr>",
			"\t",
			"    <?php",
			"    foreach(filter_list() as \\$val){",
			"        echo '<tr><td>'.\\$val.'</td><td>'.filter_id(\\$val).'</td></tr>';",
			"    }",
			"    ?>",
			"\t",
	 	    "</table>",
			"\t",
			"\t",
			"//syntax to sanitize string(remove all html tag from a string)",
			"\\$text = '<h1Hello World</h1>';",
			"echo \\$text; //output  Hello World",
			"\\$sanitize_string = htmlspecialchars(\\$text);",
			"echo \\$sanitize_string; //output <h1Hello World</h1>",
		    "\t",
		    "\t",
			"//syntax to validate integer;",
			"\\$num = 10;",
			"if(filter_var(\\$num,FILTER_VALIDATE_INT) === 0 || !filter_var(\\$num,FILTER_VALIDATE_INT) === false){",
			"   //normally php filter sanitize is going to think 0 is a invalid integer, that's why we have to",
			"   //write these conditions like above",
			"   echo 'Number is valid!!!';",
			"}else{",
			"   echo 'Number is invalid!!!';",
			"}",
			"\t",
			"//syntax to validate email;",
			"\\$email = 'HackerHP@outlook.com';",
			"if(!filter_var(\\$email,FILTER_VALIDATE_EMAIL) === false){",
			"   echo 'Email is valid!!!';",
			"}else{",
			"   echo 'Email is invalid!!!';",
			"}",
			"//syntax to remove illegal character from an email",
			"\\$email2 = '/\\hackerhp@outlook.com';",
			"\\$sanitize_email = filter_var(\\$email2,FILTER_SANITIZE_EMAIL);",
			"echo \\$sanitize_email;//output hackerhp@outlook.com",
			"\t",
			"//syntax to validate IP Address",
			"\\$ip = '127.0.0.1';",
			"if(!filter_var(\\$ip,FILTER_VALIDATE_IP)===false){",
			"   echo 'IP is valid!!!';",
			"}else{",
			"   echo 'IP is invalid!!!';",
			"}",
			"\t",
			"//syntax to sanitize and validate an url",
			"\\$url = '/\\^%\\$@\\$^&^*&><https://www.google.com';",
			"\\$sanitize_url = filter_var(\\$url,FILTER_SANITIZE_URL);",
			"echo \\$sanitize_url;//output /\\^%$@$^&^*&>",
			"\t",
			"\\$url2 = 'https://www.google.com';",
			"if(!filter_var(\\$url2,FILTER_VALIDATE_URL) === false){",
			"   echo 'Url is valid!!!';",
			"}else{",
			"   echo 'Url is invalid!!!';",
			"}",
			"//You can go to PHP main webpage to find more methods if you want"
		 
		],
		"description": "Inserting a block of syntaxes containt all the common filter features to validate or sanitize data input"
	},



	"Using AJAX with PHP MySQL PDO method to validate Username input":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_ajaxValidateUsernameThroughMySQLDatabase",
		"body": [
			"<label for='username_input'><b style='font-size:40px;'>Username:</b></label><br>",
			"<input id='username_input' title='Enter username' name='username1' type='text'",
			" placeholder='Enter username...' data-username-input='username_input_data'",
			"  style='width:500px;font-size:40px;' ",
			" onkeyup='CheckUserName(this.value)' >",
			"  <!--You can use onchange event if you want the program validate your username after you fill out",
			"   username and not focus the mouse to this input field",
			"-->",
			" <div id='CheckUserName_exists_or_not' style='font-size:40px;color:red;'></div>",
	        "\t",
			" <script>",
			"    function CheckUserName(val){",
			"       if(val == \"\"){",
			"         document.getElementById('CheckUserName_exists_or_not').innerHTML = \"\";",
			"       }else{",
			"         let xml = new XMLHttpRequest();",
			"         xml.onreadystatechange = function(){",
			"              if(this.readyState == 4 && this.status == 200){",
			"                 document.getElementById('CheckUserName_exists_or_not')",
			"                 .innerHTML = this.responseText;",
			"              }",
			"         }",
			"         xml.open('GET','test2.php?q='+val,true);",
			"         xml.send();",
			"      }",
			"   }",
			" </script>",
			"<!--Syntax in test2.php file-->",
			"\t",
			"\t",
			"<?php",
            "\t",
			"\\$web_host = 'yourwebhost';",
			"\\$admin = 'your username admin';",
			"\\$admin_database_pass = 'your password';",
			"\\$database_name = 'your database';",
	        "\t",
	        "\t",
			"\\$q1  = \\$_GET['q'];",
	        "\t",
	        "\t",
			" try{",
			"   \\$access_database_info = 'mysql:host='.\\$web_host.';dbname='.\\$database_name;",
			"   \\$conn = new PDO(\\$access_database_info,\\$admin,\\$admin_database_pass);",
			"   \\$conn -> setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
			"   \\$query1 = 'SELECT Customer_Username FROM customers WHERE Customer_Username = :seek_username';",
			"\t",
			" \\$stmt = \\$conn->prepare(\\$query1);",
			"\t",
			"  \\$stmt->bindParam(':seek_username',\\$seek_username);",
			"\t",
			"  \\$seek_username = \\$q1;",
			"\t",
			"  \\$stmt ->execute();",
			"\t",
			"   \\$row = \\$stmt->rowCount();",
	        "\t",
			"   if(\\$row > 0){",
			"      echo 'Username already exists!!!';",
			"   }else{",
			"      echo 'This username is new and you can register account with this username now!!!';",
			"   }",
			"\t",
			"\t",
			"}catch(PDOException \\$e){",
			"   echo 'ERROR: '.\\$e->getMessage();",
			"}",
			"\t",
			" \\$conn = null;",
		   "?>",
		],
		"description": "Inserting a block of PHP and JavaScript Ajax syntaxes about using AJAX with PHP MySQL PDO method to validate Username input "
	},



	"Using AJAX with PHP MySQL PDO method to select and get table data":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_ajaxSelectDisplayDataFromMySQLDatabase",
		"body": [
			
    
			"<label for='model_input'><b style='font-size:40px;'>Car Model:</b></label><br>",
            "\t",
			"<select id='model_input' title='Enter model' name='model_input' type='text'",
			" data-model-input='model_input_data'",
			"  style='width:500px;font-size:40px;' ",
			" onchange='GetCarData(this.value)' >",
			"\t",
			"    <option disabled selected>--Select Car Model--</option>",
			"    <option value='Lamborghini Veneno 2022'>Lamborghini Veneno 2022</option>",
			"    <option value='Lamborghini Aventador 2022'>Lamborghini Aventador 2022</option>",
			"",
			"</select>",
	        "\t",
	        "\t",
			" <div id='CarDataBlock'></div>",
	        "\t",
			" <script>",
			"     function GetCarData(val){",
			"             if(val == \"\"){",
			"                 document.getElementById('CarDataBlock').innerHTML = \"\";",
			"             }else{",
			"                 let xml = new XMLHttpRequest();",
			"                 xml.onreadystatechange = function(){",
			"                     if(this.readyState == 4 && this.status == 200){",
			"                         document.getElementById('CarDataBlock')",
			"                         .innerHTML = this.responseText;",
			"                     }",
			"              }",
			"              xml.open('GET','test2.php?q='+val,true);",
			"              xml.send();",
			"             }",
			"     }",
			" </script>",
		



			"<!--Syntax in test2.php file-->",
			"\t",
			"\t",
			"<?php",
            "\t",
			"\\$web_host = 'yourwebhost';",
			"\\$admin = 'your username admin';",
			"\\$admin_database_pass = 'your password';",
			"\\$database_name = 'your database';",
	        "\t",
	        "\t",
			"\\$q1  = \\$_GET['q'];",
	        "\t",
	        "\t",
			" try{",
			"   \\$access_database_info = 'mysql:host='.\\$web_host.';dbname='.\\$database_name;",
			"   \\$conn = new PDO(\\$access_database_info,\\$admin,\\$admin_database_pass);",
			"   \\$conn -> setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_EXCEPTION);",
			"   \\$query1 = 'SELECT Car_id,Car_model,Price,Max_speed FROM lamborghini ",
			"    WHERE Car_model = :seek_model';",
			"\t",
			" \\$stmt = \\$conn->prepare(\\$query1);",
			"\t",
			"  \\$stmt->bindParam(':seek_model',\\$seek_model);",
			"\t",
			"  \\$seek_model = \\$q1;",
			"\t",
			"  \\$stmt ->execute();",
			"\t",
			"\\$select_result  = \\$stmt->fetch();",
			"\t",
			"echo \"<table id='table1'>\";",
			"echo \" ",
			"        <tr>",
			"            <th>Car Id</th>   ",
			"            <th>Model</th>   ",
			"            <th>Price</th>   ",
			"            <th>Max_speed</th>",
			"        </tr>  ",
			"        <tr>",
			"     \"; ",
			" \\$i = 0;",
		    "\t",
			" while(\\$i<count(\\$select_result)){",
			"    echo \"<td>\".\\$select_result[\\$i].\"</td>\";",
			"    \\$i++;",
			"    if(\\$i>3){",
			"      break;",
			"    }",
			" }",
			" echo \"   </tr>\";",
			" echo \"</table>\";",
		    "\t",
			"}catch(PDOException \\$e){",
			"   echo 'ERROR: '.\\$e->getMessage();",
			"}",
			"\t",
			" \\$conn = null;",
		   "?>",
		],
		"description": "Inserting a block of PHP and JavaScript Ajax syntaxes about using AJAX with PHP MySQL PDO method to select and display data from database based on user select input "
	},



	"Generate a random string":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_randomString",
		"body": [
             "         \\$n=10;",
			 "         echo bin2hex(random_bytes(\\$n));"
		],
		"description": "Syntaxes for generating a random string"
	}



}