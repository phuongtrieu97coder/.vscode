{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }



	"Basic Function": {
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_function",
		"body":"function ${1:func1}(){ \n \n return '' ; \n \n}; \n \n ${1:func1}();",
		"description": "Create a basic JavaScript function"
	},


	"Function with parameters": {
		"scope":"plaintext,javascript,typescript,html,php",
		"prefix":"js_function_para",
		"body":"function ${1:func1}(${2:para1}){ \n \n return '' ; \n \n}; \n \n ${1:func1}();",
		"description": "Create a basic JavaScript function"
	},



	"Get Element By id,class,query,and tag": {
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_getEl_id_class_query_tag",
		"body":[
			"document.querySelectorAll('${1:#block1}')[0];",
            "document.getElementsByTagName('div')[0];",
            "document.getElementById('block1');",
            "document.getElementsByClassName('block1')[0];",
		],
		"description": "Generate 4 kinds of syntaxes to get any element through their id, class, query, tag values or names"
	},



	"Adding property data, and dataset to html element": {
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_add_data_prop_dataset",
		"body":[
			"document.getElementById('${1:input1}').${2:obj_data_prop} = {",
			"    ${3:prop_data1}: '${4:input_val1}',",
			"    ${5:prop_data1}: '${6:input_val2}'",
		   "}",
		   "\t", 
		   "\t",
		   "document.querySelectorAll('${7:#input1}')[0].dataset.${8:Input1CodeIdData}='${9:data_input1_code_id_data}';"
		   
		   
		],
		"description": "Syntaxes to add properties data and dataset to any html element"
	},



	"Insert a bunch of string method syntaxes of JavaScript": {
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_add_total_string_method",
		"body":[
			"var str1 = 'welcome to our website';",
			"const str2 = 'hello THERE';",
			"let str3 = 'hi,WELCOME,HOW are YOU?';",
			"console.log(str1.concat(str2,str3));",
			"console.log(str1.length);",
			"console.log(str2.constructor);",
			"console.log(str3.charAt(4));",
			"console.log(str3.charAt(str3.length-1));",
			"console.log(str2.charAt(str2.length-3));",
			"console.log(str3.charCodeAt(5));",
			"console.log(str3.charCodeAt(str3.length-2));",
			"console.log(String.fromCharCode(69,74,82,81,63,57));",
			"console.log(str1.includes('to'));",
			"console.log(str2.includes('ER',2));",
			"console.log(str3.indexOf('O'));",
			"console.log(str3.indexOf('are',5));",
			"//find the index of the last occurence of a specified string value",
			"console.log(str3.lastIndexOf('O'));",
			"//check if a string endsWith a specfied string value",
			"console.log(str3.endsWith('YOU'));",
			"//check if a string endsWith a specified string value, assuming this string has a specified number of character",
			"console.log(str2.endsWith('o',6));",
			"//check if a string startsWith a specified string value",
			"console.log(str3.startsWith('hi'));",
			"//check if a string startsWith a specified string value, begin at a specified position",
			"console.log(str2.startsWith('W',3));",
			"//search a string for a match against a regular expression, return the matches as an array object",
			"console.log(str2.match(/e/g));",
			"console.log(str2.match(/e/gi));",
			"//g is global search, i is case-insensitive",
			"//make a string that has a specified number of copies",
			"console.log(str3.repeat(4));",
			"//replace the specified string value with a new value",
			"console.log(str1.replace('o','O'));",
			"//replace the specified string value with a new value, this time replace all the match value ",
			"//using regular expression",
			"console.log(str1.replace(/o/g,'O'));",
			"console.log(str1.replace(/o/gi,'O'));",
			"//replace the specified string value with a new value, this time replace all the match value",
			"//using regular expression and the function inside replace method to return the replacement text",
			"console.log(str1.replace(/welcome|to|our|website/gi,function(item1){return item1.toUpperCase()}));",
			"//slice/extract parts of a string",
			"//using starting position=> extracts parts from this position to the end of this string",
			"console.log(str2.slice(3));",
			"//slice/extract parts of a string",
			"//using starting position,ending position=> extracts parts from start to end position",
			"console.log(str3.slice(3,6));",
			"//split/separate parts of a string and return the entire string as an array has only one element",
			"console.log(str3.split());",
			"//split/separate parts of a string and return the array separates at every single character of this string",
			"console.log(str2.split(''));",
			"//split/separate parts of a string and return the array of substring",
			"console.log(str3.split(' '));",
			"//split/separate parts of a string and return the array separates at the specified string character",
			"//provided in split method",
			"console.log(str2.split('e'));",
			"console.log(str2.split(/e/gi));",
			"console.log(str2.split(/e/gi));",
			"//split/separate parts of a string and return the array separates at the specified string character",
			"//provided in split method. This array has a specified number of element that was provided in split method",
			"console.log(str3.split(/e|o/gi,4));",
			"//convert a string into lowercase or uppercase letters",
			"console.log(str1.toLowerCase());",
			"console.log(str2.toUpperCase());",
			"//convert a string into lowercase or uppercase letter base on the host's current locale",
			"//locale(place where something happened) is base on the language settings of a web browser",
			"console.log(str3.toLocaleUpperCase());",
			"console.log(str2.toLocaleLowerCase());",
			"//using substr to extract parts of a string, this time extract parts from the specified starting position",
			"//to the end of this string",
			"console.log(str1.substr(4));",
			"//using substr to extract parts of a string, this time extract parts from the specified ",
			"//starting position with a specified number of character to extract",
			"console.log(str3.substr(3,2));",
			"//using substr to extract parts of a string, this time extract parts from the specified ",
			"//negative starting position with a specified number of character to extract",
			"// make sure the ouput will extract parts of a string from the end",
			"console.log(str2.substr(-3,2));",
			"//using substr to extract parts of a string, this time extract parts from the specified ",
			"//negative starting position => output will extract the character at the end of this string",
			"console.log(str3.substr(-1));",
			"console.log(str3.substr(-3));",
			"console.log(str3.substr(str3.length-1));",
			"//using substring to extract parts of a string, this time extract parts from the specified starting position",
			"//to the end of this string",
			"console.log(str1.substring(4));",
			"//using substring to extract parts of a string, this time extract parts from the specified ",
			"//starting position to the specified ending position",
			"console.log(str3.substring(3,6));",
			"//using substr to extract parts of a string, this time extract parts from the specified ",
			"//starting position => output will extract the character at the end of this string",
			"console.log(str3.substring(str3.length-1,str3.length));",
			"//output value of a string using toString and valueOf",
			"console.log(str1.toString());",
			"console.log(str2.valueOf());",
			"//compare two strings to check if string a come before/after or equal to string b base on locale",
			"//locale(place where something happened) is base on the language settings of a web browser",
			"//output  -1: come before     0: equal     1: come after",
			"var str4= 'ab';",
			"var str5= 'cd';",
			"var str6 = 'ab';",
			"console.log(str4.localeCompare(str5));",
			"console.log(str4.localeCompare(str6));",
			"console.log(str5.localeCompare(str4));",
			"//remove the whitespace on both side of a string, not including the whitespaces between each words",
			"const str7 ='   hello   there   ';",
			"console.log(str7.trim());"
		   
		],
		"description": "Syntaxes to add properties data and dataset to any html element"
	},

	"Array Filter":{
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_arr_filter",
		"body":[
		"/*",
		"Array.filter() method creates an array filled with all array elements that pass a test",
		" (provided as a function).",
		"\t",
		"array.filter(function(currentValue, index, arr), thisValue)",
		"\t",
		"*/",

		"\t",
		"\t",
		"var age = [52,69,27,36];",
		"console.log(age.filter(a=>a>30));//output [ 52, 69, 36 ]",
		"\t",
		"var age2 = [52,69,27,36];",
		"console.log(age2.filter(filter_func)); //output [ 52, 69, 36 ]",
		"function filter_func(age){",
		"    return age>30;",
		"}",
		"\t",
		"\t",
		"//filtering every element of ages array to see if they are greater than age value of input field in HTML file",
		"/*",
		"<input type='number' id='age' value='18'>",
		"<button onclick='result()'>Click</button>",
		"<div id='block1'></div>",
				
		"<script>",
		"           var  ages = [24,50,61,18];",
				
		"function func1(age){",
		"   return age >= document.getElementById('age').value;",
		"}",


		"function result(){",
		"  document.getElementById('block1').innerHTML = ",
		"ages.filter(func1);",
		"}",
		"*/"
		],
		"description": "Insert a block of array.filter() syntaxes"
	},


    "Basic class":{
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_classBasic",
		"body":[

			"class Car {",
			"   constructor(Model,Brand,Price){",
			"       this.model = Model;",
			"       this.brand = Brand;",
			"       this.price = Price;",
			"   }",
			"   Introduction = (sale) => {",
			"       document.getElementById('block1').innerHTML = `Model: \\${this.model}. Brand: \\${this.brand}.",
			"        Price: \\${this.price}. Sale: \\${sale}.`;",
			"       console.log( `Model: \\${this.model}. Brand: \\${this.brand}. Price: \\${this.price}. Sale: \\${sale}.`);",
			"   }",
			"}",
			"const Car_obj = new Car('Audi-2346','Audi','\\$68,999');",
			"Car_obj.Introduction('10%');",
			"//output   Model: Audi-2346. Brand: Audi. Price: \\$68,999. Sale: 10%.",
		 
		],
		"description": "Inserting a block of  JavaScript syntaxes that includes a basic class syntax "
	},


	"Open_Close register or login form functions":{
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_OpenCloseRegisterLoginFormFunctions",
		"body":[
         "//Notice: You must have a login or register form and overlay block that has been written before ",
		 "// to works with these two functions below",
		 "function Open_login_or_register_form_func(){",
		"    document.getElementById('log_in_or_register_form').style.display = 'block';",
		"    document.getElementById('overlay1').style.display = 'block';",
		" }",
			
		"function Close_login_or_register_form_func(){",
		"   document.getElementById('log_in_or_register_form').style.display = 'none';",
		"   document.getElementById('overlay1').style.display = 'none';",
		"}",
		 
		],
		"description": "Inserting a block of  JavaScript syntaxes that includes 2 functions to open or close a register or login form"
	},


	"AJAX XMLHttpRequest()":{
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_AJAX_XMLHttpRequest",
		"body": [
			"var xml = new XMLHttpRequest();",
			"xml.onreadystatechange = function(){",
			"  if(this.readyState == 4 && this.status == 200){",
			"     document.getElementById('${1:anyblock}').innerHTML = this.responseText;",
			"  }",
			"}",
			"xml.open('GET','filenameAndExtension',true);",
			"//To send a data to a page you can add query syntax after file name:",
			"//xml.open('GET','filenameAndExtension?q='+val,true);",
			"//To avoid a cached result, you can add an unique id to query syntax after filename",
			"//xml.open('GET','filenameAndExtension?id='+Math.random(),true);",
			"xml.send();",
			"\t",
			"\t",
			"//To post data like a form please write add some syntaxes like the example below",

			"var xml = new XMLHttpRequest();",
			"xml.onreadystatechange = function(){",
			"  if(this.readyState == 4 && this.status == 200){",
			"     document.getElementById('${1:anyblock}').innerHTML = this.responseText;",
			"  }",
			"}",
  			"xml.open(\"POST\", \"test2.php\",true); ",
  			"xml.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\"); ",
  			"xml.send(\"fname=Henry&lname=Ford\");",
			"\t",
			"\t",
			"//In test2.php you can echo \\$_POST['fname'];   or \\$_POST['lname'] to output POST data",
			"\t",
			"\t",
			"//In test cases, you may want to consider using  this.getResponseHeader()   or this.getAllResponseHeaders() function to get ",
			"//specific header information from the server. You can read document to know more about them."
  
		],
		"description": "Inserting a block of JavaScript AJAX XMLHttpRequest()"
	},


	"AJAX XMLHttpRequest() with callback":{
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_AJAX_XMLHttpRequestCallback",
		"body": [
			"//below are some example to use callback technique with AJAX XMLHttpRequest()",
			"loadfunc('test1.json',loadfile1);",
			"loadfunc('test2.json',loadfile2);",
			"function loadfunc(url,loadfile){",
			"    var xml = new XMLHttpRequest();",
			"    xml.onload = function(){loadfile(this);}",
			"    xml.open('GET',url,true);",
			"    xml.send();",
			"}",
			"/*",
			"Or you can use:",
			"function loadfunc(url,loadfile){",
			"    var xml = new XMLHttpRequest();",
			"    Xml.onreadystatechange = function(){loadfile(this);}",
			"    xml.open('GET',url,true);",
			"    xml.send();",
			"}",
			"*/",
			"function loadfile1(xml){",
			"    if(xml.readyState == 4 && xml.status == 200){",
			"       var parse_data = JSON.parse(xml.responseText);",
			"       b.innerHTML = parse_data.language._back_end;",
			"    }else{",
			"       b.innerHTML = 'Sorry, there was an error loading your file!!!';",
			"    }",
			"}",
			"function loadfile2(xml){",
			"    if(xml.readyState == 4 && xml.status == 200){",
			"      var parse_data2 = JSON.parse(xml.responseText);",
			"      b2.innerHTML = parse_data2.total_language;",
			"    }else{",
			"      b2.innerHTML = 'Sorry, there was an error loading your file!!!';",
			"    }",
			"}",
		],
		"description": "Inserting a block of JavaScript AJAX XMLHttpRequest() with callback technique"
	},


	"Slideshow autoslide in specific duration":{
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_slideshowAutoslide",
		"body": [
			"<div id='block1'>",
			"    <img class='img_slide' src='strength-img3.jpg' width='100%' height='300px'>",
			"    <img class='img_slide' src='strength-img4.jpg' width='100%' height='300px'>",
	 		" </div>",
			"\t",
			"\t",
	 		"  <script>",
			"    var slide_index = 0;",
			"    carousel();",
			"    function carousel(){",
			"       var i;",
			"       var x = document.getElementsByClassName('img_slide');",
			"       for(i=0;i<x.length;i++){",
			"          x[i].style.display='none';",
			"       }",
			"       slide_index++;",
			"       if(slide_index>x.length){slide_index=1};",
			"       x[slide_index-1].style.display='block';",
			"       setTimeout(carousel,2000);",
			"    }",
	 		"  </script>",
 
		],
		"description": "Inserting a block of JavaScript to make slideshow autoslide in a specific duration"
	},


	"Slideshow with autoslide+ slide buttons in specific duration+ indicators ":{
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_slideshowAutoslideSlideButtonsIndicators",
		"body": [
			"<div id='block1' class='w3-display-container'>",
			"",
			"   <div id='block1_1' class='block1_content'>",
			"        <img src='image/car/chervolet_camaro.jpg' width='100%' height='550px'>",
			"   </div>",
			"\t",
			"\t",
			"\t",
			"\t",
			"\t",
			"   <div id='block1_2' class='block1_content'>",
			"   <img src='image/car/chervolet_corvette_c8_2.jpg' width='100%' height='550px'>",
			"   </div>",
			"\t",
			"\t",
			"\t",
			"\t",
			"   <div id='block1_3' class='block1_content'>",
			"   <img src='image/car/dodge_viper.jpg' width='100%' height='550px'>",
			"   </div>",
			"\t",
			"\t",
			"\t",
			"\t",
			"\t",
			"\t",
			"\t",
			"\t",
			"     <button id='butt1' title='previous button' name='prev'",
			"     type='button' onclick='slide_activate(-1)' class='w3-hover-red' ",
			"     style='color:aqua;font-size:40px;position:absolute;top:20px;left:30px;",
			"     background-color:rgba(255, 255, 255, 0);border:none;'>",
			"     <i class='fa fa-angle-double-left'></i>",
			"     </button>",
			"\t",
			"\t",
			"\t",
			"\t",
			"     <button id='butt2' title='forward button' name='next'",
			"     type='button' onclick='slide_activate(1)' class='w3-hover-red' ",
			"     style='color:aqua;font-size:40px;",
			"     position:absolute;top:20px;left:1250px;",
			"     background-color:rgba(255, 255, 255, 0);border:none;'>",
			"     <i class='fa fa-angle-double-right'></i>",
			"     </button>",
			"\t",
			"\t",
			"\t",
			"\t",
			"<div class='w3-display-bottommiddle'>",
			"\t",
			"\t",
			"\t",
			"       <span class='w3-badge badge1 w3-hover-aqua'",
			"       style='width:20px;height:20px;cursor:pointer;background-color:black'",
			"       onclick='current_slide(0)'></span>",
			"\t",
			"\t",
			"\t",
			"       <span class='w3-badge badge1 w3-hover-aqua'",
			"       style='width:20px;height:20px;cursor:pointer;background-color:black'",
			"       onclick='current_slide(1)'></span>",
			"\t",
			"\t",
			"\t",
			"       <span class='w3-badge badge1 w3-hover-aqua'",
			"       style='width:20px;height:20px;cursor:pointer;background-color:black'",
			"       onclick='current_slide(2)'></span>",

			"\t",
			"\t",
			"\t",
			"</div>",
	" </div>",
	"\t",
	"\t",
	"\t",
	 "<script>",
	"      var index = 1;",
	"      var b = document.getElementsByClassName('block1_content');",
	"\t",
	"      var bdg = document.getElementsByClassName('badge1');",
	"\t",
	"      slide_func(index);",
	"\t",
	"\t",
	"      function current_slide(n){",
	"           slide_func(index = n);",
	"      }",
	"\t",
	"\t",
	"      function slide_activate(n){",
	"           slide_func(index +=n);",
	"      }",
	"      function slide_func(n){",
	"\t",
	"           if(n>b.length){index = 1};",
	"           if(n<1){index = b.length};",
	"\t",
	"\t",
	"\t",
	"           for(let i = 0; i<b.length;i++){",
	"                 b[i].style.display = 'none';",
	"\t",
	"            }",
	"            for(let o = 0; o<bdg.length; o++){",
	"                 bdg[o].className =  bdg[o].className.replace(' w3-aqua',');",
	"            }",
	"             b[index -1].style.display = 'block';",
	"             bdg[index -1].className += ' w3-aqua';",
	"\t",
	"       }",
	"</script>",


 
		],
		"description": "Inserting a block of JavaScript to make slideshow autoslide in a specific duration+slide buttons+indicators "
	},


	"Fetch API":{
		"scope":"plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix":"js_fetchAPI",
		"body": [
			"//Below are two ways to work with fetch API",
			"var file = 'filename';",
			"fetch(file)",
			".then(x=>x.text())",
			".then(y=>{",
			"    document.getElementById('block1').innerHTML = y;",
			"//if you works with JSON file, make sure you use JSON.parse(y) to output data",
			"});",
	        "\t",
			"\t",
	
	
			"loadfile('filename');",
			"async function loadfile(file2){",
			"     let obj1 = await fetch(file2);",
			"     let txt = await obj1.text();",
			"     let pd2 = JSON.parse(txt);",
			"     document.querySelectorAll('#block2')[0].innerHTML = pd2;",
			"}",
	
	
		],
		"description": "Inserting a block of JavaScript for Fetch API"
	},

	"JS callback function":{
		"scope": "plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix": "js_callbackFunction",
		"body": [
			"function output (some){",
			"   console.log(some);",
			"}",
			"function sum(num1,num2,mycallback){",
			"   var total = num1+num2;",
			"   mycallback(total);",
			"}",
			"sum(5,6,output);",
			"//output  11;",
			
		],
		"description": "Adding an example of JavaScript callback function"
	},


	"JS Async + await":{
		"scope": "plaintext,javascript,typescript,html,php,angularjs,jquery,react,reactjs",
		"prefix": "js_async+await",
		"body": [
			"//Below are three examples of how to use async+await to bring callback function to advance level",
			"//Async",
			"\t",
			"function  output(some){",
			"  document.getElementById('block1').innerHTML= some;",
		    "}",
		    "async function func1(){return 'JAVASCRIPT'};",
		    "func1().then(val=>output(val));",
		    "//output JAVASCRIPT",
			"\t",
			"\t",
			"\t",
			"//Await",
			"\t",
			"\t",
			"async function func1(){",
			"  let mypromise1 = new Promise((resolve1,reject1)=>{",
			"      resolve1('Good morning');",
			"  });",
			"  document.getElementById('block1').innerHTML = await mypromise1;",
			"   const output_console = await mypromise1;",
			"   console.log(output_console);",
			"\t",
		    "};",
		 	" func1();",
		    "//output Good morning",
			"\t",
			"\t",
			"async function func1(){",
			"   let mypromise1 = new Promise((resolve1,reject1)=> {",
			"   setTimeout(function(){resolve1('async wait for a set time out')},3000);",
			"\t",
			"\t",
		    "   });",
		    "   document.getElementById('block1').innerHTML = await mypromise1;",
		    "   const output_console = await mypromise1;",
		    "   console.log(output_console);",
			"\t",
		    "}",
		    "func1();",
	
	
			
		],
		"description": "Adding examples of JavaScript async+await"
	}

}