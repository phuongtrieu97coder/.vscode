{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"Usefull string functions":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_stringUsefulFunctions",
		"body": [
			"echo strlen('Good morning'); //returns the length of a string. Output 12",
			"echo str_word_count('Good morning'); // returns the counting value of a string. Output 2",
			"echo strrev('Good morning');//returns the reversed string. Output gninrom dooG",
			"echo strpos('Good morning','mo');//returns the position of a specific text within a string after it was found.",
			"//it returns false if there's no match.",
			"//stripos() is like strpos(), but stripos() is case-insensitive",
			"//strrpos() finds the position of the last occurrence of a string inside another string(case-sensitive)",
			"//strrripos() is like strrpos(), but strripos() is case-insensitive",
            "\t",
			" echo str_replace('o','e','Good morning');//replaces some characters with other characters in a string or array. Output Geed merning;",
			"foreach(str_replace('item1','item_special',array('item1','item2','item3')) as \\$v){",
			"   echo \\$v.'<br>';",
		    "};",
			"\\$str = 'I have noodle, rice, beef, pork in menu';",
			"\\$meat = array('beef','pork');",
			"\\$vegetable = array('potatoes','brocolli');",
			"echo str_replace(\\$meat,\\$vegetable,\\$str);//I have noodle, rice, potatoes, brocolli in menu",
			"\t",
			"//str_ireplace() is like str_replace(), but str_ireplace() is case-insensitive",
			"\t",
			"\t",
			"//addcslashes(str,character) add backslashes in front of specified characters.",
			"\\$str = 'Good morning!!! Welcome to my program!!!';",
			"echo addcslashes(\\$str,'d').'<br>';",
			"//Goo\\d morning!!! Welcome to my program!!!",
			"echo addcslashes(\\$str,'d,o,e,m,p,g').'<br>';",
			"//G\\o\\o\\d \\m\\ornin\\g!!! W\\elc\\o\\m\\e t\\o \\my \\pr\\o\\gra\\m!!!",
			"echo addcslashes(\\$str,'a..z').'<br>';",
			"//G\\o\\o\\d \\m\\o\\r\\n\\i\\n\\g!!! W\\e\\l\\c\\o\\m\\e \\t\\o \\m\\y \\p\\r\\o\\g\\r\\a\\m!!!",
			"echo addcslashes(\\$str,'A..Z').'<br>';",
			"//\\Good morning!!! \\Welcome to my program!!!",
			"echo addcslashes(\\$str,'A..Z,a..z').'<br>';",
			"//\\G\\o\\o\\d \\m\\o\\r\\n\\i\\n\\g!!! \\W\\e\\l\\c\\o\\m\\e \t\\o \\m\\y \\p\\r\\o\\g\\r\\a\\m!!!",
			"\t",
			"\t",
			"//stripcslashes() removes backslashes added by addcslashes() function.",
			"//stripslashes() removes backslashes added by addslashes() function.",
			"\\$str = 'Hello World';",
        	"\\$addSlashes = addcslashes(\\$str,'A..Z,a..z');//\\H\\e\\l\\l\\o \\W\\o\\r\\l\\d",
        	"echo \\$addSlashes.'<br>';",
        	"echo stripcslashes(\\$addSlashes).'<br>';//Hello Wo ld",
        	"echo stripslashes(\\$addSlashes).'<br>';//Hello World",
			"\t",
			"\t",
			 "//bin2hex() converts a string value of ASCII characters to hexadecimal values",
			 "\\$str = 'Hello World';",
			 "\\$bin2hex = bin2hex(\\$str);",
			 "\\$pack = pack('H*',\\$bin2hex);",
			 "\\$hex2bin = hex2bin(\\$bin2hex);",
			 "echo \\$bin2hex.'<br>';//output 48656c6c6f20576f726c64;",
			 "echo \\$pack;//output Hello World;",
			 "echo \\$hex2bin;//output Hello World",

			 "\t",
			 "\t",

			 "//chop() removes whitespaces or other characters from the right end of a string",
			 "echo chop('Hello World  ');//output Hello World",
			 "echo chop('Hello World','World');//output Hello",

			 "\t",
			 "\t",
			 "//ltrim() removes whitespaces or other characters from the left side of a string",
			 "//rtrim() removes whitespaces or other characters from the right side of a string",
			 "//trim() removes whitespaces or other characters from both side of a string",
			 "//arguments to put into those functions above are as same as chop()",
			 "\t",
			 "\t",

			 "//chunk_split(string,length,end) splits a string into a series of smaller parts. This function doesn't alter the original string",
       		 "//'length' is a number that defines the length of the chunks. If not specified, the string is going to stay as normal which means nothing is going to be split",
       		 "//‘end’ defines what to be placed at the end of each chunk. If not specified, whitespaces are going to be placed at the end of each chunk.",
       		 "echo chunk_split('hello world');//hello world",
       		 "echo chunk_split('hello world',1,',').'<br>';//h,e,l,l,o, ,w,o,r,l,d,",
       		 "echo chunk_split('Hello World',3);//Hel lo Wor ld",

			"\t",
			"\t",
            "//explode() breaks a string into an array separated at specified places. explode(separator,string,limit)",
			"//'separator' specifies where to break the string.",
			"//'limit' is optional in which it helps this function limit the number of element of the array. 0 is going to return an array with one element.",
			"\\$str = 'Hello World';\\$str2 = 'Hello,World';",
			"echo explode(' ',\\$str).'<br>';",
			"echo explode(',',\\$str2).'<br>';",
			"echo explode(' ',\\$str,2);",

			"\t",
			"\t",
			"//implode() and join() functions are going to turn an array into a string ",
			"\\$arr1 = array('Hello','World','!!!');",
       		"echo implode(\\$arr1).'<br>';//HelloWorld!!!",
       		"echo implode(' ',\\$arr1).'<br>';//Hello World !!!",
       		"echo implode(',',\\$arr1).'<br>';//Hello,World,!!!",
       		"echo join(\\$arr1).'<br>';//HelloWorld!!!",
       		"echo join(',',\\$arr1).'<br>';//Hello,World,!!!",

			"\t",
			"\t",
			"\\$str1 = 'Hello world!!!';",
        	"\\$uuencode = convert_uuencode(\\$str1);//encodes a string using uuencode algorithm",
        	"\\$uudecode = convert_uudecode(\\$uuencode);//decode an uuencoded string",
        	"echo \\$uuencode.'<br>';//  .2&5L;&\\@=V]R;&0A(2\\$` ",
        	"echo \\$uudecode.'<br>';// Hello world!!!",


			
		],
		"description": "Syntaxes of useful string functions"



		
	},

	"Usefull string functions part 2":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_stringUsefulFunctions2",
		"body": [
			"\\$str = '<h1>Hello</h1>';",
			"echo htmlspecialchars(\\$str);",
			"//output &lt;h1&gt;Hello&lt;/h1&gt",
			"echo htmlspecialchars_decode('&lt;h1&gt;Hello&lt;/h1&gt');",
			"//output <h1>Hello</h1>",
	  		"\t",
	  		"\t",
			"\\$str2 = '<h1>Welcome</h1>';",
			"echo htmlentities(\\$str2);",
			"//output &lt;h1&gt;Welcome&lt;/h1&gt",
			"echo html_entity_decode('&lt;h1&gt;Welcome&lt;/h1&gt');",
			"//output <h1>Welcome</h1>",
			"\t",
			"\t",
			"//ucwords(\\$str) converts first letter of each word to uppercase",
			"echo ucwords('hello world');//output Hello World",
			"//ucfirst(\\$str) converts first letter of the first word in a string to uppercase",
			"echo ucfirst('hello world');//Hello world",
			"//lcfirst(\\$str) converts first letter of the first word in a string to lowercase",
			"echo lcfirst('Hello world');//hello world",
			"//strtoupper(\\$str) converts a string to uppercase letters",
			"echo strtoupper('hello world');//HELLO WORLD",
			"//strtolower(\\$str) converts a string to lowercase letters",
			"echo strtolower('HELlO WORLD');//hello world",
			"\t",
			"\t",
			"//parse_str(query,\\$arr) parses a query string into an array",
			"parse_str('name=Terry&age=36',\\$arr1);",
			"echo \\$arr1['name'];//Terry",
			"\t",
			"\t",
			"//str_pad(string,length,pad_string,pad_type) function pads a string to a new length with special string",
			"echo str_pad('hello',30,'.').'<br>';",
       		"//hello.........................",
       		"echo str_pad('hello',30,'+_',STR_PAD_LEFT).'<br>';",
       		"//+_+_+_+_+_+_+_+_+_+_+_+_+hello",
       		"echo str_pad('hello',30,'+_',STR_PAD_BOTH).'<br>';",
       		"//+_+_+_+_+_+_hello+_+_+_+_+_+_+",

			"\t",
			"\t",
			"//str_repeat(string,number) repeats a string with a number of times.",
			"echo str_repeat('*',10).'FG';",
        	"//**********FG",
			"\t",
			"\t",
			"//str_shuffle(string) randomly shuffles all characters of a string. Return value is going to change",
        	"//when you refresh or reload the webpage",
        	"echo str_shuffle('Good morning');",
        	"//dmno Gonoirg",
			

			"\t",
			"\t",
			"//strchr(string,search,before_search) searches for the first occurrence of a string inside another string.(case-sensitive)",
			"//and return the string that is searching for",
			"//before_search default is false.If set to true, it returns the part of the string before the first occurrence of the search parameter",
			"//stristr(string,search,before_search) is like above but case-insensitive",
			"//strstr(string,search) searches for the first occurrence of a string inside another string.(case-sensitive)",
			"//and return the string including the first occurrence of the 'search' string to the end of the required string parameter.",
			"\t",
			"echo strchr('Good morning','morning').'<br>';//morning",
			"echo strchr('Hello world','world',true).'<br>';//Hello",
			"echo stristr('Good morning','morning').'<br>';//morning",
			"echo stristr('Hello world','world',true).'<br>';//Hello",
			"echo strstr('Good Afternoon','Good').'<br>';//Good Afternoon",
			"//if we search for Afternoon in strstr function, this function is going to return nothing",
			"\t",
			"\t",
			"//strrchr(string,search) searches for the last occurrence of a string inside another string and return all characters",
			"//from the last occurrence of a string within another string, to the end of the main string,",
			"//or FALSE if the character is not found.",
			"echo strrchr('hello world','o');",
			"//orld",
			"\t",
			"\t",
			"//strpbrk(string,character) searches a string for the specified character and returns the rest of the string from ",
			"//where it found the first occurrence of a specified character, otherwise it returns FALSE.",
			"echo strpbrk('Good morning','oo');//ood morning",

			"\t",
			"\t",
			"//substr(string,start,end) returns a part of a string from the specified position",
			"//start and end are number that are used to specify the position to extract the string",
			"//*If you don't specify the end position, it will return a part of a string from the starting position to the rest of a string*",
			"//+The first position of a string is 0",
			"//+The final position of a string is 'strlen(\\$string)'",
			"//+The position of a string that excludes 2  characters at the end of a string is '-2'",
			"echo substr('hello world',2).'<br>';//llo world",
			"echo substr('hello world',2,8).'<br>';//llo worl",
			"echo substr('hello world',2,strlen('hello world')).'<br>';//llo world",
			"echo substr('hello world',2,-3).'<br>';//llo wo",

			"\t",
			"\t",
			"//substr_count(string,substring,start,end) counts and returns the number of times a substring occurs in a string",
			"//Be careful to specify the end number position. This function generates a warning if the start parameter plus the end parameter is greater than the string length.",
			"echo substr_count('hello world','o').'<br>';//2",
            "echo substr_count('hello world','l',2).'<br>';//3",
            "echo substr_count('hello world','l',2,9).'<br>';//3",
            "echo substr_count('hello world','l',2,strlen('hello world')).'<br>';//error 2+11=13>strlen('hello world')",

			"\t",
			"\t",
			"/*",
			"str_starts_with(string,keyword)",
			"check if a string starts with something",
			"\t",
			"str_ends_with(string,keyword)",
			"check if a string ends with something",
            "\t",
			"*/",
			"echo str_starts_with('hello world','hello').'<br>';//1",
			"\t",
            "echo str_ends_with('hello world','world').'<br>';//1",



			



		],
		"description": "Syntaxes of useful string functions part2"
	},

	"crypt() function":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_crypt()",
		"body":[
		"//crypt() function returns a hashed string ",
		"\t",
		"\t",
		"   \\$pass = 'butcherfithack';",
		"   \\$cryptpass = \"\";",
		"   \\$cryptpass2 = \"\";",
		"   \\$cryptpass3 = \"\";",
		"   \\$cryptpass4 = \"\";",
		"   \\$cryptpass4_2 = \"\";",
		"   \\$cryptpass5 = \"\";",
		"   \\$cryptpass6 = \"\";",
		"\t",
		"\t",

		"   if(CRYPT_STD_DES==1){",
		"   //salt string with 2 characters from the alphabet './0-9A-Za-z'",
		"       \\$cryptpass = crypt(\\$pass,'nm');",
		"   }else{",
		"       echo 'Standard DES does not supported!!!';",
		"   }",
		"\t",
		"\t",

		"   if(CRYPT_EXT_DES==1){",
		"   //salt string with nine characters consisting of an underscore,4 characters of iteration count, and 4 characters of salt",
		"   //please read document to fomd 4 characters of iteration count, ",
		"   //or you can write any word with a number from 1 to 9 combined with two dots",
		"       \\$cryptpass2 = crypt(\\$pass,'_S4..wrtl');",
		"   }else{",
		"       echo 'Extended DES does not supported!!!';",
		"   }",

		"\t",
		"\t",
		"    if(CRYPT_MD5 ==1){",
		"  //salt string starting with \\$1\\$ and 12 characters ending with \\$ symbol.",
		"        \\$cryptpass3=crypt(\\$pass,'\\$1\\$vbnmlkhjrtpd\\$');",
		"    }else{",
		"        echo 'MD5 does not supported!!!';",
		"    }",

		"\t",
		"\t",
		"    if(CRYPT_BLOWFISH==1){",
		"         //salt string starting with \\$2a\\$, or \\$2y\\$; 2 digit characters with \\$ symbol from 04-31\\$,",
		"         //and 22 characters ending with \\$ symbol.",
		"         //It takes really long time to execute BLOWFISH",
		"         \\$cryptpass4=crypt(\\$pass,'\\$2a\\$26\\$vbnmwertasdfghjkqwerzx\\$');",
		"    }else{",
		"         echo 'BLOWFISH does not supported!!!';",
		"    }",
			
		"\t",
		"\t",
					
		"   if(CRYPT_BLOWFISH==1){",
		"         \\$cryptpass4_2=crypt(\\$pass,'\\$2y$13\\$vbnmwertasdfghjkqwerzx\\$');",
		"   }else{",
		"         echo 'BLOWFISH does not supported!!!';",
		"   }",
		"\t",
		"\t",
			
		"   if(CRYPT_SHA256==1){",
		"         //salt string starting with \\$5\\$, rounds=5000 is default (you can provide any number between 1000, and 999,999,999)",
		"         //rounds indicate how many times the hashing loop should be executed,",
		"         // and 16 characters ending with \\$ symbol.",
		"         \\$cryptpass5 = crypt(\\$pass,'\\$5\\$rounds=5000\\$vbnmlkjhputwasdf\\$');",
		"   }else{",
		"         echo 'SHA256 does not supported!!!';",
		"   }",
			
		"\t",
		"\t",
			
		"   if(CRYPT_SHA512==1){",
		"         //salt string starting with \\$6\\$, rounds=5000 is default (you can provide any number between 1000, and 999,999,999)",
		"         //rounds indicate how many times the hashing loop should be executed,",
		"         // and 16 characters ending with \\$ symbol.",
		"         \\$cryptpass6 = crypt(\\$pass,'\\$6\\$rounds=5000\\$ghjklfdsaqwertop\\$');",
		"   }else{",
		"         echo 'SHA512 does not supported!!!';",
		"   }",
		],
		"description":"Adding crypt() syntaxes to hashing a string or password"
	},



	"hash_values() function and examples to compare user password that was stored after being hashed with crypt() function":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_hash_equals()",
		"body":[
			"\\$pass = 'butcherfithack';",
			"\\$cryptSHA256=\"\";",
		    "\t",
			"if(CRYPT_SHA256==1){//you can use any type of crypt() function",
			"    \\$cryptSHA256 = crypt(\\$pass,'\\$5\\$rounds=5000\\$vnbmlkjhgfdsqwer\\$');",
			"}else{",
			"    echo 'SHA256 does not supported!!!';",
			"}",
			"\t",
			"if(hash_equals(crypt(\\$pass,'\\$5\\$rounds=5000\\$vnbmlkjhgfdsqwer\\$'),\\$cryptSHA256)==true){",
			"    echo var_dump(hash_equals(crypt(\\$pass,'\\$5\\$rounds=5000\\$vnbmlkjhgfdsqwer\\$'),\\$cryptSHA256)).'<br>';//output bool(true)",
			"    echo hash_equals(crypt(\\$pass,'\\$5\\$rounds=5000\\$vnbmlkjhgfdsqwer\\$'),\\$cryptSHA256).'<br>';//output 1",
			"    echo 'Password matches!!!';",
			"}else{",
			"    echo 'Password does not match!!!';",
			"}",
			"\t",
			"\t",
			"//EX2",
			"\\$pass = 'butcherfithack';",
			"\\$pass_stored = '\\$1\\$vftghjkl\\$yIOFu68vZeasaKlB08X2s/';//this is password after being hashed with MD5",
			"\t",
			"if(hash_equals(\\$pass_stored,crypt(\\$pass,'\\$1\\$vftghjklpvbn\\$')) == true){",
			"    echo 'Password matches!!!';",
			"}else{",
			"    echo 'Password does not match!!!';",
			"}",
			
   
		 
   
		],
		"description": "hash_values() function and examples to compare user password input with password that was stored after being hashed with crypt() function"
	},

	"password_verify() function and examples to verify if a user's password match the stored password or not":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_password_verify()",
		"body": [
			"\\$pass='columbus3436';",
       	    "\\$passHash = crypt(\\$pass,'_D6..wfgm');//Extended DES hash",
       	    "\\$passStored = \\$passHash;//_D6..wfgm2AQ14RY1IRE",
            "\t",
        	"if(password_verify(\\$pass,\\$passStored)){",
        	"      echo 'Password matches!!!';",
        	"}else{",
        	"      echo 'Password does not match!!!';",
        	"}",
         

		],
		"description": "syntaxes of password_verify() function and examples to verify if a user's password match the stored password or not"
	},

	"password_hash() function and examples to hash password":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_password_hash()",
		"body": [
			"\\$pass='columbus3436';",
			"\\$passdefaulthash = password_hash(\\$pass,PASSWORD_DEFAULT);",
			"\\$passArgon2Ihash = password_hash(\\$pass,PASSWORD_ARGON2I);",
			"\\$passArgon2IDhash = password_hash(\\$pass,PASSWORD_ARGON2ID);",
	
			"\\$passArgon2Ihash2 = password_hash(\\$pass,PASSWORD_ARGON2I,[PASSWORD_ARGON2_DEFAULT_MEMORY_COST]);",
			"\\$passArgon2IDhash2 = password_hash(\\$pass,PASSWORD_ARGON2ID,[PASSWORD_ARGON2_DEFAULT_TIME_COST]);",
			"\\$passArgon2IDhash3 = password_hash(\\$pass,PASSWORD_ARGON2ID,[PASSWORD_ARGON2_DEFAULT_THREADS]);",
		],
		"description": "syntaxes of password_hash() function and examples to hash password"
	},

	"md5_file() function and examples to hash filename":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_md5_file('filename')",
		"body": [
			"echo md5_file('text1.txt');",
			"//ed40e8600336757f2553a78942278e59"
		],
		"description": "syntaxes of md5_file() function and examples to hash filename"
	},
	"sha1_file() function and examples to hash filename":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_sha1_file('filename')",
		"body": [
			"echo sha1_file('text1.txt');",
			"//083bfd2da421fbe93cfa29b31867716cccb9be66"
		],
		"description": "syntaxes of sha1_file() function and examples to hash filename"
	},


	"Array useful functions":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_arrayUsefulFunctions",
		"body": [
			"/*count(array,mode), sizeof(array,mode) ",
			"returns the number of elements in an array.",
            "\t",
			"Mode is optional. 0 is default and it makes this function does not count all elements of multidimensional arrays.",
			"1 is going to count all the elements of multidimensional arrays*/",
			"\\$list1 = [10,20,30];",
			"echo count(\\$list1).'<br>';//3",
			"\\$list2= [[10,20],[30,40]];",
			"echo count(\\$list2).'<br>';//2",
			"echo count(\\$list2,1).'<br>';//6",
			"echo sizeof(\\$list2).'<br>';//2",
			"echo sizeof(\\$list2,1).'<br>';//6",
			"\t",
			"\t",
			"//array_change_key_case() changes all keys in an array to lowercase or uppercase",
			"//array_change_key_case(array,case) ",
			"//case: CASE_LOWER, CASE_UPPER",
			"\\$arr1=array('car1'=>'BMW','car2'=>'Ford');",
			"\\$arr2=['CAR1'=>'BMW','CAR2'=>'Ford'];",
			"array_change_key_case(\\$arr1,CASE_UPPER);",
			"array_change_key_case(\\$arr2,CASE_LOWER);",
			"\t",
			"\t",
			"//array_chunk() splits an array into chunks of new arrays",
			"//array_chunk(array,size,preserve_key)  preserve_key: true or false. true is going to preserve keys.",
			"//false is default and it is going to reindex the chunk numerically",
			"\\$arr=['el1','el2','el3','el4'];",
			"array_chunk(\\$arr,2);// [['el1','el2'],['el3','el4']]",
			"\\$arr2=['key1'=>'el1','key2'=>'el2','key3'=>'el3','key4'=>'el4'];",
			"array_chunk(\\$arr,2);// [['0'=>'el1','1'=>'el2'],['0'=>'el3','1'=>'el4']]",
			"array_chunk(\\$arr,2,true);// [['key1'=>'el1','key2'=>'el2'],['key3'=>'el3','key4'=>'el4']]",
			"\t",
			"\t",
			 "//array_combine(key,value) combines 2 arrays as key and value to form a new array.",
         	 "//2 arrays must have the same amount of elements.",
         	 "\\$arr1 = array('car1','car2');",
         	 "\\$arr2 = ['BMW','Ferrari'];",
         	 "array_combine(\\$arr1,\\$arr2);",
			 "\t",
			 "\t",
			 "//array_count_values(array) counts the occurrence of each value in an array. Returns an associative array with ",
        	 "//keys as the original array's values, and values as the number of occurrences.",
			 "\\$arr1 = array('Ferrari','BMW','Lamborghini','BMW','Ferrari','Ford');",
			 "\t",
			 "\t",
			 "/*array_column(array,column_key,index_key) function returns the values from a single column in the input array",
			 "+array: a multidimensional array with different small associative arrays as elements that contains different keys and values.",
			 " This structural array can be used to make a table with different columns.",
			 "\t",
			 "+column_key: The key that you want to get value from each small associative arrays. ",
			 "This parameter can also be NULL to return complete arrays.",
			 "\t",
			 "+index_key: Optional. It helps specify the value for the each index key according to data in your associative arrays.",
			 " If not specified, this function will auto generate index key starting with 0.*/",
             "\t",
			 "\\$car_collection = [",
			 "  [",
			 "   \"id\"=>\"F-46557\",",
			 "   \"model\"=>\"Ford-46557\",",
			 "   \"brand\"=>\"Ford\"",
			 "  ],",
			 "  [",
			 "   \"id\"=>\"Pgn-46557\",",
			 "   \"model\"=>\"Pagani-46557\",",
			 "   \"brand\"=>\"Pagani\"",
			 "  ]",
		 	 "];",
  			 "\t",
		 	 "foreach(array_column(\\$car_collection,'model','id') as \\$k => \\$v){",
			 "   echo \\$k.'=>'.\\$v.'<br>';",
		     "}",
			 " /*",
			" F-46557=>Ford-46557",
			" Pgn-46557=>Pagani-46557",
			" */",
			 "\t",
			 "\t",
			"//array_intersect_assoc(array1,array2,...) compares keys and values of two or more arrays and returns the matches.",
			"\\$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");",
			"\\$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");",
			"\t",
			"\\$result=array_intersect_assoc(\\$a1,\\$a2);",
			" foreach(\\$result as \\$k=>\\$v){",
			"    echo \\$k.'=>'. \\$v.'<br>';",
			" };",
			" /*",
			" a=>red",
			" b=>green",
			" c=>blue",
			" */",
			"//array_intersect() compares values of two or more arrays and returns the matches",
			"//array_intersect_key() compares keys of two or more arrays and returns the matches",
			"\t",
			"\t",
			

			
		],
		"description": "syntaxes of useful array functions"
	},

	"Array useful functions2":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_arrayUsefulFunctions2",
		"body":[
			"//array_keys(array,value,strict_mode) returns all the keys of an array.",
			"//Value is optional and it helps return only the key attached with that value.",
			"// Strict_mode is optional and can be true or false",
			"\\$arr1 = ['car1'=>'Ford','car2'=>'Suzuki'];",
			"foreach(array_keys(\\$arr1) as \\$v){",
			"echo \\$v.'<br>';",
			"}",
			"    //car1",
			"    //car2",
			"foreach(array_keys(\\$arr1,'Ford',true) as \\$v2){",
			"    echo \\$v2.'<br>';",
			"}//car1",
            "\t",
			"//array_values(array) returns all the values of an array",
			"\t",
			"//array_key_exists(key,array) checks if a specified key exists in an array, returns true or false.",
			"\\$arr1 = array('model1'=>'Bentley','model2'=>'Pagani');",
			"if(array_key_exists('model1',\\$arr1)){",
			"   echo 'model1 key exists in \\$arr1';",
			"}else{",
			"   echo 'model1 key does not exist in \\$arr1';",
			"}",
			"\t",
			"\t",
			"/*array_merge(arr1,arr2,…) | array_merge_recursive(arr1,arr2,...) merges one or more arrays into one array",
			"\t",
			"If one or more array elements have the same key, the last one overrides the others.",
			"\t",
			"The difference between this function and the array_merge_recursive() function ",
			"is when two or more array elements have the same key. Instead of override the keys, ",
			"the array_merge_recursive() function makes the value as an array.",
			"If you want to append array elements from the second array to the first array while not overwriting the elements",
			" from the first array and not re-indexing, use the '+' array union operator instead of ','*/",
			"\t",
			"\t",
		
			"//array_pop(array) removes the last element of an array",
			"\\$car1_collection = array('car1'=>'Mercedes','car2'=>'Ford');",
            "array_pop(\\$car1_collection);",
            "print_r(\\$car1_collection);",
            "//Array ( [car1] => Mercedes )",
			"\t",
			"\t",
			"//array_push(array,value1,…) inserts one or more elements",
			"//to the end of an array",
			"\\$car1_collection = array('Mercedes','Ford');",
			"array_push(\\$car1_collection,'Suzuki','Bentley');",
			"print_r(\\$car1_collection);",
			"/*Array (",
			"[0] => Mercedes ",
			"[1] => Ford ",
			"[2] => Suzuki ",
			"[3] => Bentley )*/",
			"\t",
			"\t",
			"//array_reverse(array,preserve_key)",
 			"//returns an array in reverse order",
			"//preserve_key can be true or false. If true, the keys are preserved",
			"\\$car1_collection = array('car1'=>'Mercedes','car2'=>'Ford');",
            "print_r(array_reverse(\\$car1_collection));",
            "echo '<br>';",
            "print_r(array_reverse(\\$car1_collection,true));",
            "//Array ( [car2] => Ford [car1] => Mercedes )",
            "//Array ( [car2] => Ford [car1] => Mercedes )",
			"\t",
			"\t",
			"//array_shift(array) removes the first element of",
			"//an array and can returns the removed element",
			"\t",
			"\\$car1_collection = array(",
			"'car1'=>'Mercedes',",
			"'car2'=>'Ford');",
			"echo array_shift(\\$car1_collection).'<br>';",
			"print_r(\\$car1_collection);",
			"  /*",
			"  Mercedes",
			"  Array ( [car2] => Ford )",
			"  */",
			"\t",
			"\t",
			"//array_unshift(array,value1,...)",
			"\\$car1_collection = array('Mercedes','Ford');",
            "array_unshift(\\$car1_collection,'Suzuki');",
            "print_r(\\$car1_collection);",
            "/*",
            "Array ( [0] => Suzuki [1] => Mercedes [2] => Ford )",
            "*/",
			"\t",
			"\t",
			"//array_product(array) calculates and returns the product of an array.",
			"// Product is value of the multiplication of two or more numbers",
			"//array parameter must be an array that has elements as integer or float",
			"\\$list1 = [10,20,30];",
 			"echo array_product(\\$list1);//6000",
			"\t",
			"\t",
			"//array_sum(array) calculate and returns the sum of all values in an array",
			"\\$list1 = [10,20,30];",
 			"echo array_sum(\\$list1);//60",
		],
		"description":"syntaxes of useful array functions2"

	},
	"Array useful functions3":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_arrayUsefulFunctions3",
		"body": [
			"//shuffle(array) randomizes the order of elements of an array",
			"//This function assigns new key for the elements in the array. Existing keys will be removed",
			"\\$list1 = ['num1'=>10,'num2'=>20,",
			"'num3'=>30];",
			"  shuffle(\\$list1);",
			" print_r(\\$list1); ",
			"//Array( [0] => 20 [1] => 10 [2] => 30 )",
			"\t",
			"\t",
			"/*array_pad(array,number,value) inserts a specified number of elements, with a specified value, to an array.",
			"\t",
			"If 'number' is negative, this function will insert new elements to the beginning of an array.",
			"\t",
			"If 'number' is less than or equal to the length of the array, then no padding takes place*/",
			"\t",
			"\\$arr1= ['el1','el2','el3'];",
			" print_r(array_pad(\\$arr1,3,'item'));",
			" //Array ( [0] => el1 [1] => el2 [2] => el3 )",
			" echo '<br>';",
			" print_r(array_pad(\\$arr1,4,'item'));",
			" //Array ( [0] => el1 [1] => el2 [2] => el3 [3] => item )",
			" echo '<br>';",
			" print_r(array_pad(\\$arr1,-6,'item'));",
			" //Array ( [0] => item [1] => item [2] => item [3] => el1 [4] => el2 [5] => el3 )",
			"\t",
			"\t",
			"/*array_diff(array1,array2,…) compares arrays and",
			" returns the differences (compares values only)*/",
			"\\$arr1 = ['el1','el2','el3','el4'];",
			"\\$arr2 = ['el1','el2','el3'];",
			"print_r(array_diff(\\$arr1,\\$arr2));",
			"//Array ( [3] => el4 )",
			"\t",
			"/*array_diff_assoc(array1,array2,…) compares ",
			"array and returns the differences",
			"(compares keys and values) ",
			"\\$arr1=['car1'=>'Ford','car2'=>'Suzuki','car3'=>'Mercedes'];",
        	"\\$arr2=['car1'=>'Ford','car2'=>'Suzuki'];",
        	"print_r(array_diff_assoc(\\$arr1,\\$arr2));",
       		"//Array ( [car3] => Mercedes )",

			"\t",
			"array_diff_key(array1,array2,…) compares ",
			"array and returns the differences",
			"(compares keys only)*/",

			"\t",
			"\t",
			"array_flip(array) flips/ exchanges all keys with ",
			"their associated values in an array.",
			"\\$arr1 = ['car1'=>'Ford','car2'=>'Suzuki',",
			"'car3'=>'Pagani'];",
			" print_r(array_flip(\\$arr1));",
			"//Array ( [Ford] => car1 [Suzuki] => car2 ",
			"[Pagani] => car3 )",
			"\t",
			"\t",
			
			
			"/*",
			"array_search('value',array,strict_mode) searches an array for a value and returns the key.",
			"If the value is found in the array more than once, the first matching value is returned.",
			"strict_mode is optional and can be true or false",
			"*/",
			"\\$arr = ['car1'=>'Toyota','car2'=>'Lexus','car3'=>'Bentley'];",
			"echo array_search('Bentley',\\$arr);//car3",

			"\t",
			"\t",
			"\t",
			" /*",
			"array_slice(array,start,end) returns the selected parts of an array from starting position to ending position",
			"If you don't specify the ending position, this function will return the parts from the starting position to the end of ",
			"an array",
			"end( or length) is optional",
			"*/",
			"\\$arr = ['car1'=>'Toyota','car2'=>'Lexus','car3'=>'Bentley'];",
			"\\$arr2 = [10,25,30,5,80,64,72];",
			"print_r(array_slice(\\$arr,1));",
			"//Array ( [car2] => Lexus [car3] => Bentley )",
			"echo '<br>';",
			"print_r(array_slice(\\$arr2,3,5));",
			"//Array ( [0] => 5 [1] => 80 [2] => 64 [3] => 72 )",
 
			"\t",
			"\t",
			"/*",
			"array_fill_keys(array,value) returns an array that has keys as values of the array put to array parameter,",
			" and all the values as the value parameter",
			"*/",
			"\\$arr1= ['car1','car2','car3'];",
        	"print_r(array_fill_keys(\\$arr1,'Unknown'));",
			"//Array ( [car1] => Unknown [car2] => Unknown [car3] => Unknown )",
			"\t",
			"\t",
			"/*",
			"in_array('value',array,type) checks if a value exists in an array.",
			"type is optional. It allows this function check if a",
			"value exists in an array with the right type.",
			"It can be true or false",
			"*/",
			"\\$arr = array(20,30,46);",
			"if(in_array('20',\\$arr)){",
			"     echo '20 exists in \\$arr array';",
			"}else{",
			"     echo \"20 doesn't exist in \".'\\$arr array';",
			"}",
			"//20 exists in \\$arr array",
			"echo '<br>';",
			"if(in_array('20',\\$arr,true)){",
			"     echo '20 exists in \\$arr array';",
			"}else{",
			"     echo \"20 doesn't exist in \".'\\$arr array';",
			"}",
			"//20 doesn't exist in \\$arr array",

		

		],
		"description": "syntaxes of useful array functions3",
	},
	"Array useful functions4":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_arrayUsefulFunctions4",
		"body": [
		

		 "//compact('variable1','variable2',...) creates an array based on variables and their values",
		 "\\$car1 = 'Ford';",
		 "\\$car2 = 'Honda';",
		 "print_r(compact('car1','car2'));",
		 "//Array ( [car1] => Ford [car2] => Honda )",
		 "\t",
		 "\t",
		 "/*range(low,high,step) returns an array of elements in the range from low to high or high to low.", 
		 "If the low parameter higher than the high parameter, the range array will be from high to low",	
		 "step is optional and it specifies the increment used in the range.*/",
		 "print_r(range(10,20));",
		 "echo '<br>';",
		 "print_r(range(10,100,15));",
		 "echo '<br>';",
		 "print_r(range(30,10,3));",
		 "echo '<br>';",
		 "print_r(range('a','g'));",

		 "/*",
		 "Array ( [0] => 10 [1] => 11 [2] => 12 [3] => 13 [4] => 14 ",
		 "[5] => 15 [6] => 16 [7] => 17 [8] => 18 [9] => 19 ",
		 "[10] => 20 )",
		"\t",
		 "Array ( [0] => 10 [1] => 25 [2] => 40 [3] => 55",
		 " [4] => 70 [5] => 85 [6] => 100 )",
		 "\t",
		 "Array ( [0] => 30 [1] => 27 [2] => 24 [3] => 21 [4] => 18 [5] => 15 [6] => 12 )",
		 "\t",
		 "Array ( [0] => a [1] => b [2] => c [3] => d [4] => e [5] => f [6] => g )",
		 "*/",

		 "\t",
		 "\t",
		  "//list(val1,val2,...) assign array values into a list of variables",
		  "\\$car_list = ['Lamborghini','Ford','Chervolet'];",
		  "list(\\$car1,\\$car2,\\$car3) = \\$car_list;",
		  "echo \"Car1: \\$car1, Car2: \\$car2, Car3: \\$car3\";",
		  "//Car1: Lamborghini, Car2: Ford, Car3: Chervolet",
		  "echo '<br>';",
		  "list(\\$c1,,\\$c3) = \\$car_list;",
		  "echo \"Car1: \\$car1, Car3: \\$car3\";",
		  "//Car1: Lamborghini, Car3: Chervolet",

		  "\t",
		  "\t",
		  "/*extract(array,extract_rules,prefix)",
		  "assigns each keys and values inside ",
		  "an associative array to variables. This function ",
		  "uses array keys as variable names and ",
		  "values as variable values. ",
			"\t",
		  "Extract_Rules and Prefix parameters are optional",
		  "and since they tend to not so important for me, ",
		  "I don’t want to write them in this document. ",
		  "You can go to the original PHP online document",
		  "to learn about them If you like */",
			"\t",
		  "\\$carCollection =",
		  "['car1'=>'Bentley','car2'=>'Pagani','car3'=>'Ford'];",
		  "extract(\\$carCollection);",
		  "echo \"Car1: \\$car1, Car2: \\$car2, Car3: \\$car3.\";",
		  "//Car1: Bentley, Car2: Pagani, Car3: Ford.",
			"\t",
		  "/* Below is example of how to add prefix to each ",
		  "variable*/",
		  "\\$carCollection = ",
		  "['car1'=>'Bentley','car2'=>'Pagani','car3'=>'Ford'];",
		  "extract(\\$carCollection,EXTR_PREFIX_ALL,'crc');",
		  "echo \"Car1: \\$crc_car1, Car2: \\$crc_car2,",
		  "Car3: \\$crc_car3.\";",
		  "//Car1: Bentley, Car2: Pagani, Car3: Ford.",





		],
		"description": "syntaxes of useful array functions4",
	},

	"array sort":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_sortCompound",
		"body": [
			"/*",
			"array_multisort(array1,sort_order,sort_type,",
			"array2,…) returns a sorted array. You can assign",
			"one or more arrays",
			"If you want to sort multiple arrays, make sure these array have the",
			"same number amount of elements.",
			"\t",
			"String keys will be maintained, but numeric keys ",
			"will be re-indexed, starting at 0 and increase by 1.",
			"*sort_order: Optional. ",
			"\t",
			"+SORT_ASC ",
			"(ascending order)",
			"\t",
			"+SORT_DESC(descending order)",
			"\t",
			"You can assign the sort_order and sort_type parameters after ",
			"Each array. If not specified, each array parameter uses the default",
			"values.",
			"\t",
			"*sort_type: Optional",
			"\t",
			"+SORT_REGULAR: Default. Compare elements ",
			"normally",
			"\t",
			"+SORT_NUMERIC: Compare elements as numeric",
			"values",
			"\t",
			"+SORT_STRING: Compare elements as string",
			"values",
			"\t",
			"*/",
			"\\$arr1 = [15,8,39,26,12];",
			"\\$arr2 = ['Ford','Toyota','Chervolet','Bentley','Lamborghini'];",
			"array_multisort(",
			"\\$arr1,SORT_ASC,SORT_NUMERIC,",
			"\\$arr2,SORT_DESC,SORT_STRING",
			");",
			"print_r(\\$arr1);",
			"echo '<br>';",
			"print_r(\\$arr2);",
			"/*",
			"Array ( ",
			"   [0] => 8",
			"   [1] => 12 ",
			"   [2] => 15 ",
			"   [3] => 26 ",
			"   [4] => 39 ",
			")",
			"Array (",
			"   [0] => Toyota ",
			"   [1] => Lamborghini ",
			"   [2] => Ford ",
			"   [3] => Bentley ",
			"   [4] => Chervolet ",
			")",
			"*/",
			
			"\t",
			"\t",

			"/*sort(array,sort_type) sort an indexed array",
			"in ascending order. Sort_type: SORT_STRING | SORT_NUMERIC | ",
			"SORT_REGULAR",
			"\t",
			"rsort(array,sort_type) sorts an indexed array in",
			"descending order. ",
			"\t",
			"ksort(associative_array,sort_type) sorts an ",
			"associative array in ascending order,",
			"according to keys.",
			"\t",
			"krsort(associative_array,sort_type) sorts an ",
			"associative array in descending order,",
			"according to keys.",
			"\t",
			"asort(associative_array,sort_type) sorts an ",
			"associative array in ascending order, according to values. ",
			"\t",
			"arsort(associative_array,sort_type) sorts an ",
			"associative array in descending order, according to values. */",

		],
		"description": "inseting a block of PHP array syntaxes include  array_multisort(), sort(),rsort(),arsort(),asort(),ksort(),krsort()"
	},

	"array_map('function_name',array,...)":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_array_map('function_name',array,...)",
		"body": [
			"/*array_map() sends each value of an array to a user-made function, and returns an array with new values, ",
			"given by the user-made function.",
			"You can assign one array to the function, or as many as you like.",
			"array_map('function_name',array1,array…)*/",
			"\\$arr1 = [10,20,30,];",
            "function multiply(\\$v){",
            "    return \\$v*156;",
            "}",
            "\\$arr2 = array_map('multiply',\\$arr1);",
            "\t",
            "foreach(\\$arr2 as \\$v){",
            "    echo \\$v.'<br>';",
            "}",
            "/*",
            "1560",
            "3120",
            "4680",
            "*/",
			"\t",
            "function present_car(\\$n){",
            "    if(\\$n == 10){",
            "           return 'BMW';",
            "    }elseif(\\$n==20){",
            "           return 'Toyota';",
            "    }elseif(\\$n==30){",
            "           return 'Ford';",
            "    }else{",
            "           return \"\";",
            "    }",
            "}",
            "\\$arr3 = array_map('present_car',\\$arr1);",
            "foreach(\\$arr3 as \\$v){",
            "    echo \\$v.'<br>';",
            "}",
            "/*",
            "BMW",
            "Toyota",
            "Ford",
            "*/",
		    "\t",
            "\\$car1_collection = ['Chervolet','Pagani','Suzuki'];",
            "\\$car2_collection = ['Chervolet','BMW','Suzuki'];",
            "function Compare_collection(\\$a,\\$b){",
            "       if(\\$a==\\$b){",
            "           return 'Same cars';",
            "       }else{",
            "           return 'Different cars';",
            "       }",
            "}",
            "\\$arr4 = array_map('Compare_collection',\\$car1_collection,\\$car2_collection);",
            "foreach(\\$arr4 as \\$v){",
            "    echo \\$v.'<br>';",
            "}",
            "/*",
            "Same cars",
            "Different cars",
            "Same cars",
            "*/",
			
		],
		"description": "syntaxes of array_map('function_name',array,...)"
	},


	"array_filter(array,callback,flag)":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_array_filter(array,'callback_function',flag)",
		"body": [
			"/*",
			"array_filter(array,callback,flag) filters the values of an array using a callback function",
			"Flag: Optional. Specifies what arguments are sent to callback",
			"ARRAY_FILTER_USE_KEY: pass key as the only argument to callback( instead of the value)",
			"ARRAY_FILTER_USE_BOTH: pass both key and value as arguments to callback",
			"*/",
			"\\$arr1= [1,2,3,4,5,6,7,8,9,10];",
			"function Odd(\\$n){",
			"   //returns odd numbers",
			"   return \\$n & 1;",
			"}",
			"function Even(\\$n){",
			"   //returns even numbers",
			"   return !(\\$n & 1);",
			"}",
			"print_r(array_filter(\\$arr1,'Odd'));",
			"//Array ( [0] => 1 [2] => 3 [4] => 5 [6] => 7 [8] => 9 )",
			"echo '<br>';",
			"print_r(array_filter(\\$arr1,'Even'));",
			"//Array ( [1] => 2 [3] => 4 [5] => 6 [7] => 8 [9] => 10 )",
			"\t",
			"echo '<br>';",
			"\t",
			"\\$arr2 = ['car1'=>'Mercedes','car2'=>'Chervolet','car3'=>'Tesla'];",
			"function FilterCar(\\$k){",
			"   return \\$k=='car3';",
			"}",
			"function FilterLuxuryCar(\\$v,\\$k){",
			"   return \\$k=='car1' || \\$v == 'Tesla';",
			"}",
			"print_r(array_filter(\\$arr2,'FilterCar',ARRAY_FILTER_USE_KEY));",
			"//Array ( [car3] => Tesla )",
			"echo '<br>';",
			"print_r(array_filter(\\$arr2,'FilterLuxuryCar',ARRAY_FILTER_USE_BOTH));",
			"//Array ( [car1] => Mercedes [car3] => Tesla )",

		],
		"description": "syntaxes of array_filter(array,callback,flag)"
	},

	"Array reduce":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_array_reduce(array,'function',initial_value)",
		"body": [
			"//array_reduce(array,'function',initial_value) sends values in an array to a user-defined function",
			"//, and returns a string. If the array is empty and initial is not passed, this function returns NULL",
			"\\$arr = ['EWTEDFG','ZXVCVNMFH'];",
      		"\\$arr2 = [10,20,30];",
 		  	"function AddDash(\\$v1,\\$v2){",
 		  	"  return \\$v1.'-'.\\$v2;",
 		  	"}",
			"echo array_reduce(\\$arr,'AddDash','ZXCQWETR');",
			"   //ZXCQWETR-EWTEDFG-ZXVCVNMFH",
			"echo '<br>';",
			"echo array_reduce(\\$arr,'AddDash');",
			"   //-EWTEDFG-ZXVCVNMFH",
			"echo '<br>';",
			"function Add(\\$v1,\\$v2){",
			"   return \\$v1+\\$v2;",
			"}",
			"echo array_reduce(\\$arr2,'Add',10);",
			"//70",
		],
		"description": "Adding a block of PHP array_reduce function"
	},



	"Array replace":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_array_replace(array1,array2)",
		"body": [
			"/*",
			" array_replace(array1,array2) replaces the values of the first array with the values from the following arrays, ",
			" and returns a placed array.",
			"\t",
			"*If you want to replace some thing from an object, make sure that a specified key from array1 exists in array2. ",
			"If more than 2 arrays are used, the values from later arrays will overwrite the previous ones*",
			"\t",
			"This function doesn't change the value of the original array",
			"\t",
			" */",
			" \\$arr = array('el1','el2');",
			" \\$arr2 = array('el3','el4');",
			" print_r(array_replace(\\$arr,\\$arr2));",
			" //Array ( [0] => el3 [1] => el4 )",
			" echo '<br>';",
			" \\$arr3 = ['car1'=>'Ford','car2'=>'Pagani'];",
			" \\$arr4 = ['car1'=>'Ford','car2'=>'Lamborghini'];",
			" print_r(array_replace(\\$arr3,\\$arr4));",
			" //Array ( [car1] => Ford [car2] => Lamborghini )",
			" echo '<br>';",
			"/*",
			"array_replace_recursive(array1,array2) replaces the values from the first array with the values",
			"from following arrays recursively. This function works like array_replace() but it tends to be used",
			" in case each array has specific keys and values as child arrays ",
			"*/",
			" \\$arr5 = ['Sport'=>['Lamborghini','Ferrari'],'Luxury'=>['Lexus','Bentley']];",
			" \\$arr6 = ['Sport'=>['Bugatti','Pagani'],'Luxury'=>['Chervolet','Arston Martin']];",
			" print_r(array_replace_recursive(\\$arr5,\\$arr6));",
			" //Array ( [Sport] => Array ( [0] => Pagani [1] => Ferrari ) ",
			" //[Luxury] => Array ( [0] => Chervolet [1] => Arston Martin ) )",
			" //If \\$arr6 doesn't have 'Bugatti', output is going to be like below",
			" //Array ( [Sport] => Array ( [0] => Pagani [1] => Ferrari ) ",
			" //[Luxury] => Array ( [0] => Chervolet [1] => Arston Martin ) )",

		],
		"description": "Adding a block of PHP array_replace function"
	},

	"array unique":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_array_unique",
		"body": [
			"/*array_unique(array,sort_type) removes duplicate values from an array. If two or more values are the same,",
			" the first appearance will be kept and the other will be removed.*/",
			"\t",
			"\\$arr = ['item1','item5','item3','item4','item2','item3','item4'];",
			"\t",
			"\t",
			"print_r(array_unique(\\$arr,SORT_STRING));",
			"//Array ( [0] => item1 [1] => item5 [2] => item3 [3] => item4 [4] => item2 )",

		],
		"description": "Adding a block of array_unique syntaxes to remove duplicate values from an array."
	},

	"array_walk, array_walk_recursive":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_arrayWalk_arrayWalkRecursive",
		"body": [
		   "/*",
           "array_walk(array,'function',parameter…) runs each array element in a user-defined function.",
           "The array’s keys and values are parameters in the function.",
           "You can change the array element's value in the user-defined function by specifying",
           "the first parameter as a reference    &$value",
           "To work with multi-dimensional array (array inside an array),",
           "use the array_walk_recursive() function.",
           "+parameter is optional. Specifies a parameter to the user-defined function. ",
           "You can assign one parameter to the function, or as many as you like.",
           "*/",
           "\\$carCollection = ['car1'=>'BMW','car2'=>'Ford'];",
           "function Introduction(\\$val,\\$key){",
           "echo \\$key.' is model: '.\\$val.'<br>';",
           "}",
           "array_walk(\\$carCollection,'Introduction');",
           "/*",
           "car1 is model: BMW",
           "car2 is model: Ford",
           "*/",
           " ",
           "\\$carCollection2 = ['car1'=>'BMW','car2'=>'Ford'];",
           "function Introduction2(\\$val,\\$key,\\$p){",
           "   echo \\$key.\\$p.\\$val.'<br>';",
           "}",
           "array_walk(\\$carCollection2,'Introduction2',' is model ');",
           "/*",
           "car1 is model: BMW",
           "car2 is model: Ford",
           "*/",
           "\\$carCollection3 = [['car1'=>'BMW','car2'=>'Ford'],'car3'=>'Toyota'];",
           "function Introduction3(\\$val,\\$key){",
           "     echo \\$key.' is model: '.\\$val.'<br>';",
           "}           ",
           "array_walk_recursive(\\$carCollection3,'Introduction3');",
           "/*",
           "car1 is model: BMW",
           "car2 is model: Ford",
           "car3 is model: Toyota",
           "*/",
		   "\\$carCollection4 = ['car1'=>'BMW','car2'=>'Ford'];",
           "function ChangeValue(&\\$val,\\$key){",
           "    \\$val = \"?\";",
           "}",
           "array_walk(\\$carCollection4,'ChangeValue');",
           "print_r(\\$carCollection4);",
           "//Array ( [car1] => ? [car2] => ? )",
		],
		"description": "Adding a block of array_walk and array_walk_recursive syntaxes."
	},


	"array current,pos,next,prev,end":{
		"scope":"html,php,plaintext,python,javascript",
		"prefix":"php_array_current|pos|next|prev|end|reset",
		"body": [
			"/*current(array)  or  pos(array) returns the value of the current element in an array. ",
			"Every array has an internal pointer to its current element, which is initialized to the first element",
		    "inserted into the array.",
			"This function does not move the arrays internal pointer.",
			"If you use current() or pos() function after the internal pointer move to different element in an array",
			"by some function like  prev(), next(), or end(), it will output the current element at its internal pointer.*/",
  			"\\$carCollection = array('Chervolet','Lamborghini','Dodge','Lexus');",
  			"echo current(\\$carCollection);",
  			"echo '<br>';",
  			"echo pos(\\$carCollection);",
        	"/*",
        	"Chervolet",
        	"Chervolet",
        	"*/",
			"\t",
			"/*next(array) moves the internal pointer to the next element in an array and returns its value.*/",
		    "\\$carCollection = array('Chervolet','Lamborghini','Dodge','Lexus');",
			"echo next(\\$carCollection);//lamborghini",
			"\t",
			"/*prev(array) moves the internal pointer to the previous element in an array and returns its value.",
			"You have to use next() or end() function first to move the internal pointer to different element before you use this function.*/",
			"\t",
 			"\\$carCollection = array('Chervolet','Lamborghini','Dodge','Lexus');",
        	"echo next(\\$carCollection);//lamborghini",
        	"echo '<br>';",
        	"echo prev(\\$carCollection);//Chervolet",
			"\t",
			"\t",

			"/*end(array) moves the internal pointer to the last element in an array and returns its value.*/",
			"\t",
			"\\$carCollection = array('Chervolet','Lamborghini','Dodge','Lexus');",
			"echo end(\\$carCollection);//Lexus",
			"\t",
			"//reset(array) moves the internal pointer to the first element in an array and returns its value.",
			"\t",
			"\\$carCollection = array('Chervolet','Lamborghini','Dodge','Lexus');",
			"echo end(\\$carCollection);//Lexus",
			"echo '<br>';",
			"echo reset(\\$carCollection);//Chervolet",
			"\t",
			"//Connect all of these functions: ",
			"\t",
			"\\$carCollection = array('Chervolet','Lamborghini','Dodge','Lexus');",
			"echo current(\\$carCollection);//Chevolet",
			"echo '<br>';",
			"echo next(\\$carCollection);//Lamborghini",
			"echo '<br>';",
			"echo",
			"next(\\$carCollection);//Dodge",
			"echo '<br>';",
			"echo",
			"current(\\$carCollection);//Dodge",
			"echo '<br>';",
			"echo",
			"end(\\$carCollection);//Lexus",
			"echo '<br>';",
			"reset(\\$carCollection);",
			"echo",
			"pos(\\$carCollection)//Chervolet"


		],
		"description": "Adding a block of array current(),pos(),next(),prev(),end() and reset() syntaxes."
	}

	

}